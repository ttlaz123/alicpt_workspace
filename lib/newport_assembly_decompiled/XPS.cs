// Decompiled with JetBrains decompiler
// Type: CommandInterfaceXPS.XPS
// Assembly: Newport.XPS.CommandInterface, Version=2.2.1.0, Culture=neutral, PublicKeyToken=9a267756cf640dcf
// MVID: FB71B87E-FF83-46E0-92C4-9A4818ED93EA
// Assembly location: C:\Windows\Microsoft.NET\assembly\GAC_64\Newport.XPS.CommandInterface\v4.0_2.2.1.0__9a267756cf640dcf\Newport.XPS.CommandInterface.dll

using Newport.Communication.TCPIP;
using Newport.XPS;
using System;
using System.Globalization;
using System.Resources;

namespace CommandInterfaceXPS
{
  public class XPS
  {
    private string m_strLibraryVersion = "XPS-Unified CommandInterface .Net library version 2.2.1";
    private ResourceManager m_resManager;
    private string m_logSource = "CommandInterface";
    private string m_getResourceCmdStr = string.Empty;
    private string m_getResourceResponseStr = string.Empty;
    private string m_strPrecision = "F6";
    private TCPIPSocket m_socket;
    public const int SUCCESS = 0;
    public const int FAILURE = -1;
    public const int TIMEOUT = 1000;

    public XPS()
    {
      this.m_resManager = new ResourceManager("Newport.XPS.ResourceXPS", typeof (ResourceXPS).Assembly);
      this.m_getResourceCmdStr = this.m_resManager.GetString("Info_start_CMD");
      this.m_getResourceResponseStr = this.m_resManager.GetString("Info_end_CMD");
      this.m_socket = new TCPIPSocket();
    }

    public string GetLibraryVersion() => this.m_strLibraryVersion;

    public int OpenInstrument(string address, int port, int timeout) => this.m_socket == null ? -1 : this.m_socket.DeviceOpen(address, port, timeout);

    public int CloseInstrument()
    {
      int num = 0;
      if (this.m_socket != null)
        num = this.m_socket.DeviceClose();
      return num;
    }

    public bool IsDeviceConnected() => this.m_socket != null && this.m_socket.IsConnected();

    public int SetTimeout(int sendingTimeout, int readingTimeout) => this.m_socket == null ? -1 : this.m_socket.DeviceTimeout(sendingTimeout, readingTimeout);

    public int WriteToInstrument(string command, out string response, out string errstring)
    {
      errstring = string.Empty;
      response = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = lastError.Length != 0 ? lastError : this.m_resManager.GetString("Error_007");
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " conversion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisPSOInterpolationFactorSet(
      string GroupName,
      int NbPositioners,
      uint PSOInterpolationFactor,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisPSOInterpolationFactorSet) + "(" + (GroupName.Trim() + "," + NbPositioners.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + PSOInterpolationFactor.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisPSOInterpolationFactorGet(
      string GroupName,
      int NbPositioners,
      out uint PSOInterpolationFactor,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      PSOInterpolationFactor = 0U;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisPSOInterpolationFactorGet) + "(" + (GroupName.Trim() + "," + NbPositioners.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",unsigned long*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                uint result2;
                if (uint.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  PSOInterpolationFactor = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to UInt32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSORadiusSet(string GroupName, double Radius, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSORadiusSet) + "(" + (GroupName.Trim() + "," + Radius.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSORadiusGet(
      string GroupName,
      out double Radius,
      out string errstring)
    {
      errstring = string.Empty;
      Radius = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSORadiusGet) + "(" + (GroupName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Radius = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSORadiusEllipticSet(
      string GroupName,
      int NbPositioners,
      double[] Radius,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim() + "," + NbPositioners.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (MultiAxisAbsolutePSORadiusEllipticSet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = Radius[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSORadiusEllipticGet(
      string GroupName,
      int NbPositioners,
      out double[] Radius,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Radius = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        Radius[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim() + "," + NbPositioners.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (MultiAxisAbsolutePSORadiusEllipticGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    Radius[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOLoadFromFile(
      string GroupName,
      int NbPositioners,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOLoadFromFile) + "(" + (GroupName.Trim() + "," + NbPositioners.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOPrepare(
      string GroupName,
      double[] StartPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (MultiAxisAbsolutePSOPrepare) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = StartPosition[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisRelativePSOEnable(
      string GroupName,
      double NbPositioners,
      string Mode,
      double Step,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisRelativePSOEnable) + "(" + (GroupName.Trim() + "," + NbPositioners.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Mode.Trim() + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisRelativePSODisable(
      string GroupName,
      double NbPositioners,
      string Mode,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisRelativePSODisable) + "(" + (GroupName.Trim() + "," + NbPositioners.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Mode.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOPositionerVelocityPWMEnable(
      string PositionerName,
      int PSONumber,
      double ThreshodVelocity,
      double MaxVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOPositionerVelocityPWMEnable) + "(" + (PositionerName.Trim() + "," + PSONumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ThreshodVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOPositionerVelocityPWMDisable(
      string PositionerName,
      int PSONumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOPositionerVelocityPWMDisable) + "(" + (PositionerName.Trim() + "," + PSONumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOGroupVelocityPWMDisable(
      string GroupName,
      int PSONumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOGroupVelocityPWMDisable) + "(" + (GroupName.Trim() + "," + PSONumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOGroupVelocityPWMEnable(
      string XPositionerName,
      string YPositionerName,
      int PSONumber,
      double ThreshodVelocity,
      double MaxVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOGroupVelocityPWMEnable) + "(" + (XPositionerName.Trim() + "," + YPositionerName.Trim() + "," + PSONumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ThreshodVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisRelativePSOWindowSet(
      string GroupName,
      double NbPositioners,
      double[] StartPosition,
      double[] EndPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim() + "," + NbPositioners.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (MultiAxisRelativePSOWindowSet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = StartPosition[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + EndPosition[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisRelativePSOWindowGet(
      string GroupName,
      double NbPositioners,
      out double[] StartPosition,
      out double[] EndPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      StartPosition = new double[nbItems];
      EndPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
      {
        StartPosition[index] = double.MinValue;
        EndPosition[index] = double.MinValue;
      }
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim() + "," + NbPositioners.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (MultiAxisRelativePSOWindowGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*,double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2 * nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray1 = new double[nbItems];
                double[] numArray2 = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray1[index]))
                    StartPosition[index] = numArray1[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                  if (double.TryParse(strArray[index + 2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray2[index]))
                    EndPosition[index] = numArray2[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 2].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSAAxisByAxisExecution(
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      string[] PositionerName,
      double[] Range,
      out double[] PositionerPeakLocation,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      PositionerPeakLocation = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        PositionerPeakLocation[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = "int*,double*,double*";
      string str2 = nameof (MultipleAxesPDSAAxisByAxisExecution) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = PositionerName[index].Trim() + "," + Range[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result1 = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 4 * nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    PositionerPeakLocation[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 4].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSASpiralStepExecution(
      string FirstPositionerName,
      string SecondPositionerName,
      double Step,
      double Range,
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      out double FirstPositionerPeakLocation,
      out double SecondPositionerPeakLocation,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      FirstPositionerPeakLocation = double.MinValue;
      SecondPositionerPeakLocation = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPDSASpiralStepExecution) + "(" + (FirstPositionerName.Trim() + "," + SecondPositionerName.Trim() + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Range.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  FirstPositionerPeakLocation = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  SecondPositionerPeakLocation = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSASpiralContinuousExecution(
      string FirstPositionerName,
      string SecondPositionerName,
      double Step,
      double Range,
      double Speed,
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      out double FirstPositionerPeakLocation,
      out double SecondPositionerPeakLocation,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      FirstPositionerPeakLocation = double.MinValue;
      SecondPositionerPeakLocation = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPDSASpiralContinuousExecution) + "(" + (FirstPositionerName.Trim() + "," + SecondPositionerName.Trim() + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Range.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Speed.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  FirstPositionerPeakLocation = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  SecondPositionerPeakLocation = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSADichotomyExecution(
      double ReductionFactor,
      double MaxReductionFactor,
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      string[] PositionerName,
      double[] Step,
      out double[] PositionerPeakLocation,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      PositionerPeakLocation = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        PositionerPeakLocation[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = ReductionFactor.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxReductionFactor.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*";
      string str2 = nameof (MultipleAxesPDSADichotomyExecution) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = PositionerName[index].Trim() + "," + Step[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result1 = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 4 * nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    PositionerPeakLocation[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 4].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSARasterExecution(
      string FirstPositionerName,
      string SecondPositionerName,
      double Length,
      double Step,
      double Width,
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      out double FirstPositionerPeakLocation,
      out double SecondPositionerPeakLocation,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      FirstPositionerPeakLocation = double.MinValue;
      SecondPositionerPeakLocation = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPDSARasterExecution) + "(" + (FirstPositionerName.Trim() + "," + SecondPositionerName.Trim() + "," + Length.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Width.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  FirstPositionerPeakLocation = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  SecondPositionerPeakLocation = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSAEscaladeStepExecution(
      string GroupName,
      double XYStep,
      double XYrange,
      double ZStep,
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      out double FirstPositionerPeakLocation,
      out double SecondPositionerPeakLocation,
      out double ZPeakLocation,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      FirstPositionerPeakLocation = double.MinValue;
      SecondPositionerPeakLocation = double.MinValue;
      ZPeakLocation = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPDSAEscaladeStepExecution) + "(" + (GroupName.Trim() + "," + XYStep.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XYrange.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ZStep.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  FirstPositionerPeakLocation = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  SecondPositionerPeakLocation = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  ZPeakLocation = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPDSAEscaladeContinuousExecution(
      string GroupName,
      double XYStep,
      double XYrange,
      double ZStep,
      double Speed,
      out int IsTresholdReached,
      out double SignalValue,
      out double SearchTime,
      out double FirstPositionerPeakLocation,
      out double SecondPositionerPeakLocation,
      out double ZPeakLocation,
      out string errstring)
    {
      errstring = string.Empty;
      IsTresholdReached = int.MinValue;
      SignalValue = double.MinValue;
      SearchTime = double.MinValue;
      FirstPositionerPeakLocation = double.MinValue;
      SecondPositionerPeakLocation = double.MinValue;
      ZPeakLocation = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPDSAEscaladeContinuousExecution) + "(" + (GroupName.Trim() + "," + XYStep.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XYrange.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ZStep.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Speed.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IsTresholdReached = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SignalValue = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SearchTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  FirstPositionerPeakLocation = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  SecondPositionerPeakLocation = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  ZPeakLocation = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetVerCommand(out string Version, out string errstring)
    {
      errstring = string.Empty;
      Version = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetVerCommand) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Version = !string.IsNullOrEmpty(Version) ? Version + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetGantryMode(string Option, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetGantryMode) + "(" + Option.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetGantryMode(out string Option, out string errstring)
    {
      errstring = string.Empty;
      Option = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetGantryMode) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Option = !string.IsNullOrEmpty(Option) ? Option + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int InitializeAndHomeXY(string Option, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (InitializeAndHomeXY) + "(" + Option.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int InitializeAndHomeY(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (InitializeAndHomeY) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int InitializeAndHomeX(string Option, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (InitializeAndHomeX) + "(" + Option.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MoveAbsolute(
      double PositonAbsoluteX_um,
      double PositionAbsoluteY_um,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MoveAbsolute) + "(" + (PositonAbsoluteX_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionAbsoluteY_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MoveSlice(
      double y_end_um,
      double x_end_um,
      double scan_angle_urad,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MoveSlice) + "(" + (y_end_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + x_end_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + scan_angle_urad.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int WaitMotionEnd(
      double time_out_ms,
      double y_end_um,
      double x_end_um,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (WaitMotionEnd) + "(" + (time_out_ms.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + y_end_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + x_end_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int AbortMove(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (AbortMove) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetAccParams(
      out int x_acc_time_ms,
      out int x_smooth_factor_ms,
      out int y_acc_time_ms,
      out int y_smooth_factor_ms,
      out string errstring)
    {
      errstring = string.Empty;
      x_acc_time_ms = int.MinValue;
      x_smooth_factor_ms = int.MinValue;
      y_acc_time_ms = int.MinValue;
      y_smooth_factor_ms = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetAccParams) + "(" + "int*,int*,int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  x_acc_time_ms = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  x_smooth_factor_ms = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  y_acc_time_ms = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  y_smooth_factor_ms = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetAccParams(
      int x_acc_time_ms,
      int x_smooth_factor_ms,
      int y_acc_time_ms,
      int y_smooth_factor_ms,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetAccParams) + "(" + (x_acc_time_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + x_smooth_factor_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + y_acc_time_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + y_smooth_factor_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetVelParams(out double vel_x, out double vel_y, out string errstring)
    {
      errstring = string.Empty;
      vel_x = double.MinValue;
      vel_y = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetVelParams) + "(" + "double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  vel_x = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  vel_y = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetVelParams(double vel_x, double vel_y, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetVelParams) + "(" + (vel_x.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + vel_y.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetXVelParams(out double vel_x, out string errstring)
    {
      errstring = string.Empty;
      vel_x = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetXVelParams) + "(" + "double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  vel_x = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetXVelParams(double vel_x, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetXVelParams) + "(" + vel_x.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetYVelParams(out double vel_y, out string errstring)
    {
      errstring = string.Empty;
      vel_y = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetYVelParams) + "(" + "double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  vel_y = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetYVelParams(double vel_y, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetYVelParams) + "(" + vel_y.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetJogVelocity(
      double vx,
      double vy,
      int joystickAck_Timeout_ms,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetJogVelocity) + "(" + (vx.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + vy.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + joystickAck_Timeout_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetJogVelocity(
      out double vx,
      out double vy,
      out int joystickAck_Timeout_ms,
      out string errstring)
    {
      errstring = string.Empty;
      vx = double.MinValue;
      vy = double.MinValue;
      joystickAck_Timeout_ms = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetJogVelocity) + "(" + "double*,double*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  vx = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  vy = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  joystickAck_Timeout_ms = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetJogAcceleration(
      int x_acceleration_Time_ms,
      int x_smooth_factor_ms,
      int y_acceleration_Time_ms,
      int y_smooth_factor_ms,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetJogAcceleration) + "(" + (x_acceleration_Time_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + x_smooth_factor_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + y_acceleration_Time_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + y_smooth_factor_ms.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetJogAcceleration(
      out int x_acceleration_Time_ms,
      out int x_smooth_factor_ms,
      out int y_acceleration_Time_ms,
      out int y_smooth_factor_ms,
      out string errstring)
    {
      errstring = string.Empty;
      x_acceleration_Time_ms = int.MinValue;
      x_smooth_factor_ms = int.MinValue;
      y_acceleration_Time_ms = int.MinValue;
      y_smooth_factor_ms = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetJogAcceleration) + "(" + "int*,int*,int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  x_acceleration_Time_ms = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  x_smooth_factor_ms = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  y_acceleration_Time_ms = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  y_smooth_factor_ms = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int StartJog(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (StartJog) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EndJog(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EndJog) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetCurrentPosition(
      out double y_position_um,
      out double x_position_um,
      out int x1_position_cnts,
      out int x2_position_cnts,
      out int y_laser_position_cnts,
      out int x_laser_position_cnts,
      out string errstring)
    {
      errstring = string.Empty;
      y_position_um = double.MinValue;
      x_position_um = double.MinValue;
      x1_position_cnts = int.MinValue;
      x2_position_cnts = int.MinValue;
      y_laser_position_cnts = int.MinValue;
      x_laser_position_cnts = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetCurrentPosition) + "(" + "double*,double*,int*,int*,int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  y_position_um = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  x_position_um = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  x1_position_cnts = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  x2_position_cnts = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                int result6;
                if (int.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  y_laser_position_cnts = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to Int32 type";
                int result7;
                if (int.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  x_laser_position_cnts = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetZone(
      double x_center_um,
      double y_center_um,
      double radius_um,
      double hysteresis_um,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetZone) + "(" + (x_center_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + y_center_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + radius_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + hysteresis_um.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetZone(
      out double x_center_um,
      out double y_center_um,
      out double radius_um,
      out double hysteresis_um,
      out string errstring)
    {
      errstring = string.Empty;
      x_center_um = double.MinValue;
      y_center_um = double.MinValue;
      radius_um = double.MinValue;
      hysteresis_um = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetZone) + "(" + "double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  x_center_um = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  y_center_um = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  radius_um = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  hysteresis_um = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetVarX(string NameParameter, double value, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetVarX) + "(" + (NameParameter.Trim() + "," + value.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetVarXSecondary(string NameParameter, double value, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetVarXSecondary) + "(" + (NameParameter.Trim() + "," + value.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetVarY(string NameParameter, double value, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetVarY) + "(" + (NameParameter.Trim() + "," + value.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetVarX(string NameParameter, out double value, out string errstring)
    {
      errstring = string.Empty;
      value = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetVarX) + "(" + (NameParameter.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  value = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetVarXSecondary(string NameParameter, out double value, out string errstring)
    {
      errstring = string.Empty;
      value = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetVarXSecondary) + "(" + (NameParameter.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  value = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetVarY(string NameParameter, out double value, out string errstring)
    {
      errstring = string.Empty;
      value = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetVarY) + "(" + (NameParameter.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  value = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DataCollectionBufferReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DataCollectionBufferReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DataCollectionBufferAndTimeReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DataCollectionBufferAndTimeReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DataCollectionRequest(
      int NbRequestBlocks,
      out int NbReturnBlocks,
      out string Frame,
      out string errstring)
    {
      errstring = string.Empty;
      NbReturnBlocks = int.MinValue;
      Frame = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DataCollectionRequest) + "(" + (NbRequestBlocks.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",int*,char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NbReturnBlocks = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                Frame = strArray[2].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DataCollectionTimeStampGet(out double TimeStamp, out string errstring)
    {
      errstring = string.Empty;
      TimeStamp = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DataCollectionTimeStampGet) + "(" + "double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  TimeStamp = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DataCollectionTimeStampReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DataCollectionTimeStampReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetPiston(int Command, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetPiston) + "(" + Command.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetPistonState(
      out int CommandState,
      out int isEngaged,
      out int isReleased,
      out int LiftPinUPInterlock,
      out string errstring)
    {
      errstring = string.Empty;
      CommandState = int.MinValue;
      isEngaged = int.MinValue;
      isReleased = int.MinValue;
      LiftPinUPInterlock = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetPistonState) + "(" + "int*,int*,int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CommandState = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  isEngaged = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  isReleased = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  LiftPinUPInterlock = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SetBrake(int Command, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SetBrake) + "(" + Command.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GetBrakeState(out int CommandState, out string errstring)
    {
      errstring = string.Empty;
      CommandState = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GetBrakeState) + "(" + "int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CommandState = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoGetVerInterfero(out string Version, out string errstring)
    {
      errstring = string.Empty;
      Version = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoGetVerInterfero) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Version = !string.IsNullOrEmpty(Version) ? Version + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoAmplitudeGet(
      out int ZygoReferenceSignalStatus,
      out int Meas1Signal,
      out int Meas2Signal,
      out string errstring)
    {
      errstring = string.Empty;
      ZygoReferenceSignalStatus = int.MinValue;
      Meas1Signal = int.MinValue;
      Meas2Signal = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoAmplitudeGet) + "(" + "int*,int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ZygoReferenceSignalStatus = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Meas1Signal = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  Meas2Signal = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoADCDiagnosticStatusGet(
      int axis,
      int ADCMuxNumber,
      out string ADCDiagStatus,
      out string errstring)
    {
      errstring = string.Empty;
      ADCDiagStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoADCDiagnosticStatusGet) + "(" + (axis.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ADCMuxNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ADCDiagStatus = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoPositionGet(out long PositionY, out long PositionX, out string errstring)
    {
      errstring = string.Empty;
      PositionY = long.MinValue;
      PositionX = long.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoPositionGet) + "(" + "long long int*,long long int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                long result2;
                if (long.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PositionY = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int64 type";
                long result3;
                if (long.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  PositionX = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int64 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoResetX(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoResetX) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoResetY(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoResetY) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoSetOffsetX(int offset_x, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoSetOffsetX) + "(" + offset_x.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoSetOffsetY(int offset_y, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoSetOffsetY) + "(" + offset_y.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoSetPEGParams(
      int P1,
      int P2,
      uint delta1,
      int K1,
      uint delta2,
      int K2,
      int ControlWord,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoSetPEGParams) + "(" + (P1.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + P2.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + delta1.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + K1.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + delta2.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + K2.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ControlWord.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoGetPEGLastCommunicationTime(
      out double LastCommunicationTime,
      out string errstring)
    {
      errstring = string.Empty;
      LastCommunicationTime = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoGetPEGLastCommunicationTime) + "(" + "double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  LastCommunicationTime = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int FirmwareVersionGet(out string Version, out string errstring)
    {
      errstring = string.Empty;
      Version = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (FirmwareVersionGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Version = !string.IsNullOrEmpty(Version) ? Version + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int FirmwareBuildVersionNumberGet(out string Version, out string errstring)
    {
      errstring = string.Empty;
      Version = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (FirmwareBuildVersionNumberGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Version = !string.IsNullOrEmpty(Version) ? Version + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalModuleTemplateNumberGet(out string TemplateNumber, out string errstring)
    {
      errstring = string.Empty;
      TemplateNumber = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalModuleTemplateNumberGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  TemplateNumber = !string.IsNullOrEmpty(TemplateNumber) ? TemplateNumber + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int InstallerVersionGet(out string Version, out string errstring)
    {
      errstring = string.Empty;
      Version = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (InstallerVersionGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Version = !string.IsNullOrEmpty(Version) ? Version + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int Reboot(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (Reboot) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int RestartApplication(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (RestartApplication) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerMotionKernelTimeLoadGet(
      out double CPUTotalLoadRatio,
      out double CPUCorrectorLoadRatio,
      out double CPUProfilerLoadRatio,
      out double CPUServitudesLoadRatio,
      out string errstring)
    {
      errstring = string.Empty;
      CPUTotalLoadRatio = double.MinValue;
      CPUCorrectorLoadRatio = double.MinValue;
      CPUProfilerLoadRatio = double.MinValue;
      CPUServitudesLoadRatio = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerMotionKernelTimeLoadGet) + "(" + "double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CPUTotalLoadRatio = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  CPUCorrectorLoadRatio = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  CPUProfilerLoadRatio = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  CPUServitudesLoadRatio = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerRTTimeGet(
      out double CurrentRTPeriod,
      out double CurrentRTUsage,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentRTPeriod = double.MinValue;
      CurrentRTUsage = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerRTTimeGet) + "(" + "double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CurrentRTPeriod = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  CurrentRTUsage = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerSlaveStatusGet(out int SlaveControllerStatus, out string errstring)
    {
      errstring = string.Empty;
      SlaveControllerStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerSlaveStatusGet) + "(" + "int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  SlaveControllerStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerSlaveStatusStringGet(
      int SlaveControllerStatusCode,
      out string SlaveControllerStatusString,
      out string errstring)
    {
      errstring = string.Empty;
      SlaveControllerStatusString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerSlaveStatusStringGet) + "(" + (SlaveControllerStatusCode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                SlaveControllerStatusString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerSynchronizeCorrectorISR(string ModeString, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerSynchronizeCorrectorISR) + "(" + ModeString.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerStatusGet(out int ControllerStatus, out string errstring)
    {
      errstring = string.Empty;
      ControllerStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerStatusGet) + "(" + "int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ControllerStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerStatusRead(out int ControllerStatus, out string errstring)
    {
      errstring = string.Empty;
      ControllerStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerStatusRead) + "(" + "int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ControllerStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerStatusStringGet(
      int ControllerStatusCode,
      out string ControllerStatusString,
      out string errstring)
    {
      errstring = string.Empty;
      ControllerStatusString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerStatusStringGet) + "(" + (ControllerStatusCode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ControllerStatusString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ElapsedTimeGet(out double ElapsedTime, out string errstring)
    {
      errstring = string.Empty;
      ElapsedTime = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ElapsedTimeGet) + "(" + "double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ElapsedTime = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ErrorStringGet(int ErrorCode, out string ErrorString, out string errstring)
    {
      errstring = string.Empty;
      ErrorString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ErrorStringGet) + "(" + (ErrorCode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ErrorString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int Login(string Name, string Password, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (Login) + "(" + (Name.Trim() + "," + Password.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int LoginS(string Name, string CryptedPassword, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (LoginS) + "(" + (Name.Trim() + "," + CryptedPassword.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CloseAllOtherSockets(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CloseAllOtherSockets) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HardwareDriverAndStageGet(
      int PlugNumber,
      out string DriverName,
      out string StageName,
      out string errstring)
    {
      errstring = string.Empty;
      DriverName = string.Empty;
      StageName = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HardwareDriverAndStageGet) + "(" + (PlugNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*,char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                DriverName = strArray[1].Trim();
                StageName = strArray[2].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HardwareDateAndTimeGet(out string DateAndTime, out string errstring)
    {
      errstring = string.Empty;
      DateAndTime = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HardwareDateAndTimeGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  DateAndTime = !string.IsNullOrEmpty(DateAndTime) ? DateAndTime + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HardwareDateAndTimeSet(string DateAndTime, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HardwareDateAndTimeSet) + "(" + DateAndTime.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int FileScriptHistoryRename(string TCLFileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (FileScriptHistoryRename) + "(" + TCLFileName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int FileGatheringRename(string FileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (FileGatheringRename) + "(" + FileName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int INTServitudesStatusGet(out short INTServitudesStatus, out string errstring)
    {
      errstring = string.Empty;
      INTServitudesStatus = short.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (INTServitudesStatusGet) + "(" + "short*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                short result2;
                if (short.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  INTServitudesStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int16 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int INTServitudesCommandGet(out short INTServitudesCommand, out string errstring)
    {
      errstring = string.Empty;
      INTServitudesCommand = short.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (INTServitudesCommandGet) + "(" + "short*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                short result2;
                if (short.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  INTServitudesCommand = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int16 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptExecute(
      string TCLFileName,
      string TaskName,
      string ParametersList,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptExecute) + "(" + (TCLFileName.Trim() + "," + TaskName.Trim() + "," + ParametersList.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptExecuteAndWait(
      string TCLFileName,
      string TaskName,
      string InputParametersList,
      out string OutputParametersList,
      out string errstring)
    {
      errstring = string.Empty;
      OutputParametersList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptExecuteAndWait) + "(" + (TCLFileName.Trim() + "," + TaskName.Trim() + "," + InputParametersList.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  OutputParametersList = !string.IsNullOrEmpty(OutputParametersList) ? OutputParametersList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptExecuteWithPriority(
      string TCLFileName,
      string TaskName,
      string TaskPriorityLevel,
      string ParametersList,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptExecuteWithPriority) + "(" + (TCLFileName.Trim() + "," + TaskName.Trim() + "," + TaskPriorityLevel.Trim() + "," + ParametersList.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptKill(string TaskName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptKill) + "(" + TaskName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptKillAll(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptKillAll) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptRunningListGet(out string TCLTaskList, out string errstring)
    {
      errstring = string.Empty;
      TCLTaskList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptRunningListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  TCLTaskList = !string.IsNullOrEmpty(TCLTaskList) ? TCLTaskList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TimerGet(string TimerName, out int FrequencyTicks, out string errstring)
    {
      errstring = string.Empty;
      FrequencyTicks = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TimerGet) + "(" + (TimerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  FrequencyTicks = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TimerSet(string TimerName, int FrequencyTicks, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TimerSet) + "(" + (TimerName.Trim() + "," + FrequencyTicks.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CleanTmpFolder(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CleanTmpFolder) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CleanCoreDumpFolder(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CleanCoreDumpFolder) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GlobalArrayGet(int Number, out string ValueString, out string errstring)
    {
      errstring = string.Empty;
      ValueString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GlobalArrayGet) + "(" + (Number.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ValueString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GlobalArraySet(int Number, string ValueString, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GlobalArraySet) + "(" + (Number.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ValueString.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DoubleGlobalArrayGet(int Number, out double DoubleValue, out string errstring)
    {
      errstring = string.Empty;
      DoubleValue = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DoubleGlobalArrayGet) + "(" + (Number.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  DoubleValue = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DoubleGlobalArraySet(int Number, double DoubleValue, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DoubleGlobalArraySet) + "(" + (Number.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + DoubleValue.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMagneticTrackPositionAtHomeGet(
      string PositionerName,
      out double MagneticTrackPosition,
      out string errstring)
    {
      errstring = string.Empty;
      MagneticTrackPosition = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMagneticTrackPositionAtHomeGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  MagneticTrackPosition = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMagneticTrackPositionAtHomeSet(
      string PositionerName,
      double MagneticTrackPosition,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMagneticTrackPositionAtHomeSet) + "(" + (PositionerName.Trim() + "," + MagneticTrackPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotorDualSinForceBalanceGet(
      string PositionerName,
      out double FirstMotorForceBalance,
      out double SecondMotorForceBalance,
      out string errstring)
    {
      errstring = string.Empty;
      FirstMotorForceBalance = double.MinValue;
      SecondMotorForceBalance = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotorDualSinForceBalanceGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  FirstMotorForceBalance = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  SecondMotorForceBalance = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotorDualSinForceBalanceSet(
      string PositionerName,
      double FirstMotorForceBalance,
      double SecondMotorForceBalance,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotorDualSinForceBalanceSet) + "(" + (PositionerName.Trim() + "," + FirstMotorForceBalance.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SecondMotorForceBalance.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoConnectToServer(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoConnectToServer) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoReadWord(
      string AxisNum,
      string Register,
      out string Response,
      out string errstring)
    {
      errstring = string.Empty;
      Response = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoReadWord) + "(" + (AxisNum.Trim() + "," + Register.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Response = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoReadLong(
      string AxisNum,
      string Register,
      out string Response,
      out string errstring)
    {
      errstring = string.Empty;
      Response = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoReadLong) + "(" + (AxisNum.Trim() + "," + Register.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Response = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoWriteWord(
      string AxisNum,
      string Register,
      string Data,
      out string Response,
      out string errstring)
    {
      errstring = string.Empty;
      Response = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoWriteWord) + "(" + (AxisNum.Trim() + "," + Register.Trim() + "," + Data.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Response = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoWriteLong(
      string AxisNum,
      string Register,
      string Data,
      out string Response,
      out string errstring)
    {
      errstring = string.Empty;
      Response = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoWriteLong) + "(" + (AxisNum.Trim() + "," + Register.Trim() + "," + Data.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Response = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoSendAndReceive(string Command, out string Response, out string errstring)
    {
      errstring = string.Empty;
      Response = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoSendAndReceive) + "(" + (Command.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Response = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoDisconnectFromServer(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoDisconnectFromServer) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoEthernetCommunicationStatusGet(
      out int EthernetCommunicationStatus,
      out string errstring)
    {
      errstring = string.Empty;
      EthernetCommunicationStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoEthernetCommunicationStatusGet) + "(" + "int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  EthernetCommunicationStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoInterferometerStatusGet(
      out int EthernetCommunicationStatus,
      out int ZygoAxis1MeasureSignal,
      out int ZygoAxis2MeasureSignal,
      out int ZygoReferenceSignalStatus,
      out int ZygoP2BoardStatus,
      out string errstring)
    {
      errstring = string.Empty;
      EthernetCommunicationStatus = int.MinValue;
      ZygoAxis1MeasureSignal = int.MinValue;
      ZygoAxis2MeasureSignal = int.MinValue;
      ZygoReferenceSignalStatus = int.MinValue;
      ZygoP2BoardStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoInterferometerStatusGet) + "(" + "int*,int*,int*,int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  EthernetCommunicationStatus = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ZygoAxis1MeasureSignal = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ZygoAxis2MeasureSignal = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to Int32 type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  ZygoReferenceSignalStatus = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                int result6;
                if (int.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  ZygoP2BoardStatus = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoStartInterferometer(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoStartInterferometer) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoStartBoardP2(
      int Kv,
      int Kp,
      bool ReverseDirectionSenseChannel1,
      bool ReverseDirectionSenseChannel2,
      int DataAgeAdjust,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoStartBoardP2) + "(" + (Kv.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Kp.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + (object) Convert.ToInt32(ReverseDirectionSenseChannel1) + "," + (object) Convert.ToInt32(ReverseDirectionSenseChannel2) + "," + DataAgeAdjust.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoErrorStatusStringGet(int axis, out string ErrorStatus, out string errstring)
    {
      errstring = string.Empty;
      ErrorStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoErrorStatusStringGet) + "(" + (axis.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ErrorStatus = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoErrorStatusGet(int axis, out string ErrorStatus, out string errstring)
    {
      errstring = string.Empty;
      ErrorStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoErrorStatusGet) + "(" + (axis.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ErrorStatus = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoStatusStringGet(int axis, out string ErrorStatus, out string errstring)
    {
      errstring = string.Empty;
      ErrorStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoStatusStringGet) + "(" + (axis.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ErrorStatus = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoStatusGet(int axis, out string ErrorStatus, out string errstring)
    {
      errstring = string.Empty;
      ErrorStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoStatusGet) + "(" + (axis.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ErrorStatus = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoRegisterSet(
      string PositionerName,
      int Register,
      int Value,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoRegisterSet) + "(" + (PositionerName.Trim() + "," + Register.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Value.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ZygoRegisterGet(
      string PositionerName,
      int Register,
      out int Value,
      out string errstring)
    {
      errstring = string.Empty;
      Value = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ZygoRegisterGet) + "(" + (PositionerName.Trim() + "," + Register.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Value = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventAdd(
      string PositionerName,
      string EventName,
      string EventParameter,
      string ActionName,
      string ActionParameter1,
      string ActionParameter2,
      string ActionParameter3,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventAdd) + "(" + (PositionerName.Trim() + "," + EventName.Trim() + "," + EventParameter.Trim() + "," + ActionName.Trim() + "," + ActionParameter1.Trim() + "," + ActionParameter2.Trim() + "," + ActionParameter3.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventGet(
      string PositionerName,
      out string EventsAndActionsList,
      out string errstring)
    {
      errstring = string.Empty;
      EventsAndActionsList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventGet) + "(" + (PositionerName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                EventsAndActionsList = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventRemove(
      string PositionerName,
      string EventName,
      string EventParameter,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventRemove) + "(" + (PositionerName.Trim() + "," + EventName.Trim() + "," + EventParameter.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventWait(
      string PositionerName,
      string EventName,
      string EventParameter,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventWait) + "(" + (PositionerName.Trim() + "," + EventName.Trim() + "," + EventParameter.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventActionSetAndStart(
      string ExtendedEventName,
      string EventParameter1,
      string EventParameter2,
      string EventParameter3,
      string EventParameter4,
      string ExtendedActionName,
      string ActionParameter1,
      string ActionParameter2,
      string ActionParameter3,
      string ActionParameter4,
      out int ID,
      out string errstring)
    {
      errstring = string.Empty;
      ID = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventActionSetAndStart) + "(" + (ExtendedEventName.Trim() + "," + EventParameter1.Trim() + "," + EventParameter2.Trim() + "," + EventParameter3.Trim() + "," + EventParameter4.Trim() + "," + ExtendedActionName.Trim() + "," + ActionParameter1.Trim() + "," + ActionParameter2.Trim() + "," + ActionParameter3.Trim() + "," + ActionParameter4.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ID = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedConfigurationTriggerSet(
      string[] ExtendedEventName,
      string[] EventParameter1,
      string[] EventParameter2,
      string[] EventParameter3,
      string[] EventParameter4,
      out string errstring)
    {
      errstring = string.Empty;
      int length = ExtendedEventName.Length;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (EventExtendedConfigurationTriggerSet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = ExtendedEventName[index].Trim() + "," + EventParameter1[index].Trim() + "," + EventParameter2[index].Trim() + "," + EventParameter3[index].Trim() + "," + EventParameter4[index].Trim();
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedConfigurationTriggerGet(
      out string EventTriggerConfiguration,
      out string errstring)
    {
      errstring = string.Empty;
      EventTriggerConfiguration = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedConfigurationTriggerGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  EventTriggerConfiguration = !string.IsNullOrEmpty(EventTriggerConfiguration) ? EventTriggerConfiguration + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedConfigurationActionSet(
      string[] ExtendedActionName,
      string[] ActionParameter1,
      string[] ActionParameter2,
      string[] ActionParameter3,
      string[] ActionParameter4,
      out string errstring)
    {
      errstring = string.Empty;
      int length = ExtendedActionName.Length;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (EventExtendedConfigurationActionSet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = ExtendedActionName[index].Trim() + "," + ActionParameter1[index].Trim() + "," + ActionParameter2[index].Trim() + "," + ActionParameter3[index].Trim() + "," + ActionParameter4[index].Trim();
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedConfigurationActionGet(
      out string ActionConfiguration,
      out string errstring)
    {
      errstring = string.Empty;
      ActionConfiguration = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedConfigurationActionGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  ActionConfiguration = !string.IsNullOrEmpty(ActionConfiguration) ? ActionConfiguration + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedStart(out int ID, out string errstring)
    {
      errstring = string.Empty;
      ID = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedStart) + "(" + "int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ID = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedAllGet(out string EventActionConfigurations, out string errstring)
    {
      errstring = string.Empty;
      EventActionConfigurations = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedAllGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  EventActionConfigurations = !string.IsNullOrEmpty(EventActionConfigurations) ? EventActionConfigurations + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedGet(
      int ID,
      out string EventTriggerConfiguration,
      out string ActionConfiguration,
      out string errstring)
    {
      errstring = string.Empty;
      EventTriggerConfiguration = string.Empty;
      ActionConfiguration = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedGet) + "(" + (ID.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*,char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                EventTriggerConfiguration = strArray[1].Trim();
                ActionConfiguration = strArray[2].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedRemove(int ID, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedRemove) + "(" + ID.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventExtendedWait(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventExtendedWait) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringConfigurationGet(out string Type, out string errstring)
    {
      errstring = string.Empty;
      Type = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringConfigurationGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Type = !string.IsNullOrEmpty(Type) ? Type + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringConfigurationSet(string[] Type, out string errstring)
    {
      errstring = string.Empty;
      int length = Type.Length;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (GatheringConfigurationSet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = Type[index].Trim();
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringCurrentNumberGet(
      out int CurrentNumber,
      out int MaximumSamplesNumber,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentNumber = int.MinValue;
      MaximumSamplesNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringCurrentNumberGet) + "(" + "int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CurrentNumber = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  MaximumSamplesNumber = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringCurrentIndexGet(
      out int CurrentIndex,
      out int CurrentNumber,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentIndex = int.MinValue;
      CurrentNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringCurrentIndexGet) + "(" + "int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CurrentIndex = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  CurrentNumber = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringStopAndSave(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringStopAndSave) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringDataAcquire(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringDataAcquire) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringDataGet(int IndexPoint, out string DataBufferLine, out string errstring)
    {
      errstring = string.Empty;
      DataBufferLine = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringDataGet) + "(" + (IndexPoint.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                DataBufferLine = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringDataMultipleLinesGet(
      int IndexPoint,
      int NumberOfLines,
      out string DataBufferLine,
      out string errstring)
    {
      errstring = string.Empty;
      DataBufferLine = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringDataMultipleLinesGet) + "(" + (IndexPoint.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NumberOfLines.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                DataBufferLine = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringRun(int DataNumber, int Divisor, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringRun) + "(" + (DataNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Divisor.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringRunAppend(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringRunAppend) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringStop(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringStop) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExternalConfigurationSet(string[] Type, out string errstring)
    {
      errstring = string.Empty;
      int length = Type.Length;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (GatheringExternalConfigurationSet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = Type[index].Trim();
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExternalConfigurationGet(out string Type, out string errstring)
    {
      errstring = string.Empty;
      Type = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringExternalConfigurationGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Type = !string.IsNullOrEmpty(Type) ? Type + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExternalCurrentNumberGet(
      out int CurrentNumber,
      out int MaximumSamplesNumber,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentNumber = int.MinValue;
      MaximumSamplesNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringExternalCurrentNumberGet) + "(" + "int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CurrentNumber = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  MaximumSamplesNumber = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExternalDataGet(
      int IndexPoint,
      out string DataBufferLine,
      out string errstring)
    {
      errstring = string.Empty;
      DataBufferLine = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringExternalDataGet) + "(" + (IndexPoint.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                DataBufferLine = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExternalStopAndSave(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringExternalStopAndSave) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIOAnalogGet(string[] GPIOName, out double[] AnalogValue, out string errstring)
    {
      errstring = string.Empty;
      int length = GPIOName.Length;
      AnalogValue = new double[length];
      for (int index = 0; index < length; ++index)
        AnalogValue[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (GPIOAnalogGet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = GPIOName[index].Trim() + ",double*";
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str2 = response.Trim();
            int result = 0;
            string[] strArray = str2.Split(',');
            if (strArray.Length >= length + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[length];
                for (int index = 0; index < length; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    AnalogValue[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str2;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIOAnalogSet(string[] GPIOName, double[] AnalogOutputValue, out string errstring)
    {
      errstring = string.Empty;
      int length = GPIOName.Length;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (GPIOAnalogSet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = GPIOName[index].Trim() + "," + AnalogOutputValue[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIOAnalogGainGet(
      string[] GPIOName,
      out int[] AnalogInputGainValue,
      out string errstring)
    {
      errstring = string.Empty;
      int length = GPIOName.Length;
      AnalogInputGainValue = new int[length];
      for (int index = 0; index < length; ++index)
        AnalogInputGainValue[index] = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (GPIOAnalogGainGet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = GPIOName[index].Trim() + ",int*";
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str2 = response.Trim();
            int result = 0;
            string[] strArray = str2.Split(',');
            if (strArray.Length >= length + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                int[] numArray = new int[length];
                for (int index = 0; index < length; ++index)
                {
                  if (int.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    AnalogInputGainValue[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to Int32 type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str2;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIOAnalogGainSet(
      string[] GPIOName,
      int[] AnalogInputGainValue,
      out string errstring)
    {
      errstring = string.Empty;
      int length = GPIOName.Length;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string empty1 = string.Empty;
      string str1 = nameof (GPIOAnalogGainSet) + "(" + empty1;
      string empty2 = string.Empty;
      for (int index = 0; index < length; ++index)
      {
        string str2 = GPIOName[index].Trim() + "," + AnalogInputGainValue[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str1 = index != 0 || !string.IsNullOrEmpty(empty1) ? str1 + "," + str2 : str1 + str2;
      }
      string command = str1 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIOAnalogRangeConfigurationGet(
      string GPIOName,
      out double DACRange,
      out string errstring)
    {
      errstring = string.Empty;
      DACRange = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GPIOAnalogRangeConfigurationGet) + "(" + (GPIOName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  DACRange = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIOAnalogRangeConfigurationSet(
      string GPIOName,
      double DACRange,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GPIOAnalogRangeConfigurationSet) + "(" + (GPIOName.Trim() + "," + DACRange.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIODigitalGet(string GPIOName, out ushort DigitalValue, out string errstring)
    {
      errstring = string.Empty;
      DigitalValue = (ushort) 0;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GPIODigitalGet) + "(" + (GPIOName.Trim() + ",unsigned short*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                ushort result2;
                if (ushort.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  DigitalValue = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to UInt16 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIODigitalSet(
      string GPIOName,
      ushort Mask,
      ushort DigitalOutputValue,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GPIODigitalSet) + "(" + (GPIOName.Trim() + "," + Mask.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + DigitalOutputValue.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIODigitalPulseWidthGet(
      string GPIOName,
      out double PulseWidth,
      out string errstring)
    {
      errstring = string.Empty;
      PulseWidth = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GPIODigitalPulseWidthGet) + "(" + (GPIOName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  PulseWidth = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GPIODigitalPulseWidthSet(string GPIOName, double PulseWidth, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GPIODigitalPulseWidthSet) + "(" + (GPIOName.Trim() + "," + PulseWidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupAccelerationCurrentGet(
      string GroupName,
      out double[] CurrentAcceleration,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentAcceleration = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        CurrentAcceleration[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupAccelerationCurrentGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    CurrentAcceleration[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupAccelerationSetpointGet(
      string GroupName,
      out double[] SetpointAcceleration,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      SetpointAcceleration = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        SetpointAcceleration[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupAccelerationSetpointGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    SetpointAcceleration[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupAnalogTrackingModeEnable(string GroupName, string Type, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupAnalogTrackingModeEnable) + "(" + (GroupName.Trim() + "," + Type.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupAnalogTrackingModeDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupAnalogTrackingModeDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupCorrectorOutputGet(
      string GroupName,
      out double[] CorrectorOutput,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectorOutput = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        CorrectorOutput[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupCorrectorOutputGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    CorrectorOutput[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupCurrentFollowingErrorGet(
      string GroupName,
      out double[] CurrentFollowingError,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentFollowingError = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        CurrentFollowingError[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupCurrentFollowingErrorGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    CurrentFollowingError[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupHomeSearch(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupHomeSearch) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupHomeSearchAndRelativeMove(
      string GroupName,
      double[] TargetDisplacement,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupHomeSearchAndRelativeMove) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = TargetDisplacement[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupInitialize(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupInitialize) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupInitializeNoEncoderReset(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupInitializeNoEncoderReset) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupInitializeWithEncoderCalibration(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupInitializeWithEncoderCalibration) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupGantryModeGet(string GroupName, out string Option, out string errstring)
    {
      errstring = string.Empty;
      Option = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupGantryModeGet) + "(" + (GroupName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Option = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupGantryModeSet(string GroupName, string Option, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupGantryModeSet) + "(" + (GroupName.Trim() + "," + Option.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupInterlockDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupInterlockDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupInterlockEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupInterlockEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupJogParametersSet(
      string GroupName,
      double[] Velocity,
      double[] Acceleration,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupJogParametersSet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = Velocity[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupJogParametersGet(
      string GroupName,
      out double[] Velocity,
      out double[] Acceleration,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Velocity = new double[nbItems];
      Acceleration = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
      {
        Velocity[index] = double.MinValue;
        Acceleration[index] = double.MinValue;
      }
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupJogParametersGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*,double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2 * nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray1 = new double[nbItems];
                double[] numArray2 = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray1[index]))
                    Velocity[index] = numArray1[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                  if (double.TryParse(strArray[index + 2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray2[index]))
                    Acceleration[index] = numArray2[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 2].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupJogCurrentGet(
      string GroupName,
      out double[] Velocity,
      out double[] Acceleration,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Velocity = new double[nbItems];
      Acceleration = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
      {
        Velocity[index] = double.MinValue;
        Acceleration[index] = double.MinValue;
      }
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupJogCurrentGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*,double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2 * nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray1 = new double[nbItems];
                double[] numArray2 = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray1[index]))
                    Velocity[index] = numArray1[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                  if (double.TryParse(strArray[index + 2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray2[index]))
                    Acceleration[index] = numArray2[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 2].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupJogModeEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupJogModeEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupJogModeDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupJogModeDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupKill(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupKill) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMotionDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMotionDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMotionEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMotionEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMotionStatusGet(
      string GroupName,
      out int[] Status,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Status = new int[nbItems];
      for (int index = 0; index < nbItems; ++index)
        Status[index] = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupMotionStatusGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "int*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                int[] numArray = new int[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (int.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    Status[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to Int32 type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMoveAbort(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMoveAbort) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupExternalProfilerEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupExternalProfilerEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupExternalProfilerDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupExternalProfilerDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMoveAbortFast(
      string GroupName,
      int AccelerationMultiplier,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMoveAbortFast) + "(" + (GroupName.Trim() + "," + AccelerationMultiplier.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMoveAbsolute(
      string GroupName,
      double[] TargetPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupMoveAbsolute) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = TargetPosition[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMoveEndWait(
      string GroupName,
      double TimeOutMs,
      double XPosition,
      double YPosition,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMoveEndWait) + "(" + (GroupName.Trim() + "," + TimeOutMs.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + YPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMoveRelative(
      string GroupName,
      double[] TargetDisplacement,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupMoveRelative) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = TargetDisplacement[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMoveRelativeSimulated(
      string GroupName,
      double[] TargetDisplacement,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupMoveRelativeSimulated) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = TargetDisplacement[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupPositionCurrentGet(
      string GroupName,
      out double[] CurrentEncoderPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentEncoderPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        CurrentEncoderPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupPositionCurrentGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    CurrentEncoderPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupPositionSetpointGet(
      string GroupName,
      out double[] SetPointPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      SetPointPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        SetPointPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupPositionSetpointGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    SetPointPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupPositionTargetGet(
      string GroupName,
      out double[] TargetPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      TargetPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        TargetPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupPositionTargetGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    TargetPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupReferencingActionExecute(
      string PositionerName,
      string ReferencingAction,
      string ReferencingSensor,
      double ReferencingParameter,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupReferencingActionExecute) + "(" + (PositionerName.Trim() + "," + ReferencingAction.Trim() + "," + ReferencingSensor.Trim() + "," + ReferencingParameter.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupReferencingStart(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupReferencingStart) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupReferencingStop(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupReferencingStop) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupStatusGet(string GroupName, out int Status, out string errstring)
    {
      errstring = string.Empty;
      Status = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupStatusGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Status = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupStatusStringGet(
      int GroupStatusCode,
      out string GroupStatusString,
      out string errstring)
    {
      errstring = string.Empty;
      GroupStatusString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupStatusStringGet) + "(" + (GroupStatusCode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                GroupStatusString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupVelocityCurrentGet(
      string GroupName,
      out double[] CurrentVelocity,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentVelocity = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        CurrentVelocity[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupVelocityCurrentGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    CurrentVelocity[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupVelocitySetpointGet(
      string GroupName,
      out double[] SetpointVelocity,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      SetpointVelocity = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        SetpointVelocity[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupVelocitySetpointGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    SetpointVelocity[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalInterlockErrorStringGet(
      int InterlockErrorCode,
      out string InterlockErrorString,
      out string errstring)
    {
      errstring = string.Empty;
      InterlockErrorString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalInterlockErrorStringGet) + "(" + (InterlockErrorCode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                InterlockErrorString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalInterlockGroupErrorGet(
      string GroupName,
      out int GroupInterlockErrorCode,
      out string errstring)
    {
      errstring = string.Empty;
      GroupInterlockErrorCode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalInterlockGroupErrorGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  GroupInterlockErrorCode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalInterlockLiftPinErrorGet(
      string GroupName,
      out int LiftPinInterlockErrorCode,
      out string errstring)
    {
      errstring = string.Empty;
      LiftPinInterlockErrorCode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalInterlockLiftPinErrorGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  LiftPinInterlockErrorCode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int KillAll(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (KillAll) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupInitializeFromRegistration(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupInitializeFromRegistration) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupReadyAtPosition(
      string GroupName,
      double[] Position,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupReadyAtPosition) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = Position[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupKillWithRegistration(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupKillWithRegistration) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerDriverStatusGet(
      string PositionerName,
      out uint DriverStatus,
      out string errstring)
    {
      errstring = string.Empty;
      DriverStatus = 0U;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerDriverStatusGet) + "(" + (PositionerName.Trim() + ",unsigned long*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                uint result2;
                if (uint.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  DriverStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to UInt32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerDriverStatusStringGet(
      uint PositionerDriverStatus,
      out string PositionerDriverStatusString,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerDriverStatusString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerDriverStatusStringGet) + "(" + (PositionerDriverStatus.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                PositionerDriverStatusString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerErrorGet(string PositionerName, out int ErrorCode, out string errstring)
    {
      errstring = string.Empty;
      ErrorCode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerErrorGet) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ErrorCode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerErrorRead(string PositionerName, out int ErrorCode, out string errstring)
    {
      errstring = string.Empty;
      ErrorCode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerErrorRead) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ErrorCode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerErrorStringGet(
      int PositionerErrorCode,
      out string PositionerErrorString,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerErrorString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerErrorStringGet) + "(" + (PositionerErrorCode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                PositionerErrorString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerHardwareStatusGet(
      string PositionerName,
      out int HardwareStatus,
      out string errstring)
    {
      errstring = string.Empty;
      HardwareStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerHardwareStatusGet) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  HardwareStatus = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerHardwareStatusStringGet(
      int PositionerHardwareStatus,
      out string PositionerHardwareStatusString,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerHardwareStatusString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerHardwareStatusStringGet) + "(" + (PositionerHardwareStatus.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                PositionerHardwareStatusString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionersEncoderIndexDifferenceGet(
      string PositionerName,
      out double distance,
      out string errstring)
    {
      errstring = string.Empty;
      distance = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionersEncoderIndexDifferenceGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  distance = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerGantryEndReferencingPositionGet(
      string PositionerName,
      out double Position,
      out string errstring)
    {
      errstring = string.Empty;
      Position = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerGantryEndReferencingPositionGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Position = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerStageParameterGet(
      string PositionerName,
      string ParameterName,
      out string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      ParameterValue = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerStageParameterGet) + "(" + (PositionerName.Trim() + "," + ParameterName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ParameterValue = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerStageParameterSet(
      string PositionerName,
      string ParameterName,
      string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerStageParameterSet) + "(" + (PositionerName.Trim() + "," + ParameterName.Trim() + "," + ParameterValue.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorTypeGet(
      string PositionerName,
      out string CorrectorType,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectorType = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorTypeGet) + "(" + (PositionerName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                CorrectorType = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorFilterListGet(
      string PositionerName,
      out string CorrectorFilterList,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectorFilterList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorFilterListGet) + "(" + (PositionerName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                CorrectorFilterList = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerWarningFollowingErrorSet(
      string PositionerName,
      double WarningFollowingError,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerWarningFollowingErrorSet) + "(" + (PositionerName.Trim() + "," + WarningFollowingError.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerWarningFollowingErrorGet(
      string PositionerName,
      out double WarningFollowingError,
      out string errstring)
    {
      errstring = string.Empty;
      WarningFollowingError = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerWarningFollowingErrorGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  WarningFollowingError = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPositionFilterSet(
      string PositionerName,
      int FilterNumber,
      double Frequency,
      double DampingFactor,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPositionFilterSet) + "(" + (PositionerName.Trim() + "," + FilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Frequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DampingFactor.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPositionFilterGet(
      string PositionerName,
      int FilterNumber,
      out double Frequency,
      out double DampingFactor,
      out string errstring)
    {
      errstring = string.Empty;
      Frequency = double.MinValue;
      DampingFactor = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPositionFilterGet) + "(" + (PositionerName.Trim() + "," + FilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Frequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  DampingFactor = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPlantFeedForwardDelaySet(
      string PositionerName,
      int CorrectorISRPeriodNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPlantFeedForwardDelaySet) + "(" + (PositionerName.Trim() + "," + CorrectorISRPeriodNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPlantFeedForwardDelayGet(
      string PositionerName,
      out int CorrectorISRPeriodNumber,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectorISRPeriodNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPlantFeedForwardDelayGet) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CorrectorISRPeriodNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDisturbanceDisable(
      string PositionerName,
      string DisabledDirection,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDisturbanceDisable) + "(" + (PositionerName.Trim() + "," + DisabledDirection.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDisturbanceEnable(
      string PositionerName,
      string EnabledDirection,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDisturbanceEnable) + "(" + (PositionerName.Trim() + "," + EnabledDirection.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDisturbanceFileLoad(
      string PositionerName,
      string Direction,
      string FileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDisturbanceFileLoad) + "(" + (PositionerName.Trim() + "," + Direction.Trim() + "," + FileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDisturbanceStatusGet(
      string PositionerName,
      out int PositiveCompensationEnabledStatus,
      out int NegativeCompensationEnabledStatus,
      out string errstring)
    {
      errstring = string.Empty;
      PositiveCompensationEnabledStatus = int.MinValue;
      NegativeCompensationEnabledStatus = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDisturbanceStatusGet) + "(" + (PositionerName.Trim() + ",int*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PositiveCompensationEnabledStatus = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  NegativeCompensationEnabledStatus = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorAutoTuning(
      string PositionerName,
      int TuningMode,
      out double KP,
      out double KI,
      out double KD,
      out string errstring)
    {
      errstring = string.Empty;
      KP = double.MinValue;
      KI = double.MinValue;
      KD = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorAutoTuning) + "(" + (PositionerName.Trim() + "," + TuningMode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  KP = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KI = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  KD = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerAccelerationAutoScaling(
      string PositionerName,
      out double Scaling,
      out string errstring)
    {
      errstring = string.Empty;
      Scaling = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerAccelerationAutoScaling) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Scaling = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerExcitationSignalGet(
      string PositionerName,
      out int Mode,
      out double Frequency,
      out double Amplitude,
      out double Time,
      out string errstring)
    {
      errstring = string.Empty;
      Mode = int.MinValue;
      Frequency = double.MinValue;
      Amplitude = double.MinValue;
      Time = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerExcitationSignalGet) + "(" + (PositionerName.Trim() + ",int*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Mode = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Frequency = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Amplitude = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  Time = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerExcitationSignalSet(
      string PositionerName,
      int Mode,
      double Frequency,
      double Amplitude,
      double Time,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerExcitationSignalSet) + "(" + (PositionerName.Trim() + "," + Mode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Frequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Amplitude.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Time.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerExcitationSignalCorrectorOutSet(
      string PositionerName,
      int Mode,
      double Frequency,
      double Amplitude,
      double Time,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerExcitationSignalCorrectorOutSet) + "(" + (PositionerName.Trim() + "," + Mode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Frequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Amplitude.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Time.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCurrentVelocityAccelerationFiltersSet(
      string PositionerName,
      double CurrentVelocityCutOffFrequency,
      double CurrentAccelerationCutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCurrentVelocityAccelerationFiltersSet) + "(" + (PositionerName.Trim() + "," + CurrentVelocityCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + CurrentAccelerationCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCurrentVelocityAccelerationFiltersGet(
      string PositionerName,
      out double CurrentVelocityCutOffFrequency,
      out double CurrentAccelerationCutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentVelocityCutOffFrequency = double.MinValue;
      CurrentAccelerationCutOffFrequency = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCurrentVelocityAccelerationFiltersGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CurrentVelocityCutOffFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  CurrentAccelerationCutOffFrequency = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerEncoderAmplitudeValuesGet(
      string PositionerName,
      out double CalibrationSinusAmplitude,
      out double CurrentSinusAmplitude,
      out double CalibrationCosinusAmplitude,
      out double CurrentCosinusAmplitude,
      out string errstring)
    {
      errstring = string.Empty;
      CalibrationSinusAmplitude = double.MinValue;
      CurrentSinusAmplitude = double.MinValue;
      CalibrationCosinusAmplitude = double.MinValue;
      CurrentCosinusAmplitude = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerEncoderAmplitudeValuesGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CalibrationSinusAmplitude = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  CurrentSinusAmplitude = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  CalibrationCosinusAmplitude = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  CurrentCosinusAmplitude = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerEncoderCalibrationParametersGet(
      string PositionerName,
      out double SinusOffset,
      out double CosinusOffset,
      out double DifferentialGain,
      out double PhaseCompensation,
      out string errstring)
    {
      errstring = string.Empty;
      SinusOffset = double.MinValue;
      CosinusOffset = double.MinValue;
      DifferentialGain = double.MinValue;
      PhaseCompensation = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerEncoderCalibrationParametersGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  SinusOffset = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  CosinusOffset = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  DifferentialGain = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  PhaseCompensation = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerEncoderLinearCorrectionGet(
      string PositionerName,
      out double LinearEncoderCorrection,
      out string errstring)
    {
      errstring = string.Empty;
      LinearEncoderCorrection = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerEncoderLinearCorrectionGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  LinearEncoderCorrection = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerEncoderLinearCorrectionSet(
      string PositionerName,
      double LinearEncoderCorrection,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerEncoderLinearCorrectionSet) + "(" + (PositionerName.Trim() + "," + LinearEncoderCorrection.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerRawEncoderPositionGet(
      string PositionerName,
      double UserEncoderPosition,
      out double RawEncoderPosition,
      out string errstring)
    {
      errstring = string.Empty;
      RawEncoderPosition = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerRawEncoderPositionGet) + "(" + (PositionerName.Trim() + "," + UserEncoderPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  RawEncoderPosition = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDFFAccelerationSet(
      string PositionerName,
      bool ClosedLoopStatus,
      double KP,
      double KI,
      double KD,
      double KS,
      double IntegrationTime,
      double DerivativeFilterCutOffFrequency,
      double GKP,
      double GKI,
      double GKD,
      double KForm,
      double KFeedForwardAcceleration,
      double KFeedForwardJerk,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDFFAccelerationSet) + "(" + (PositionerName.Trim() + "," + (object) Convert.ToInt32(ClosedLoopStatus) + "," + KP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KS.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + IntegrationTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DerivativeFilterCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KForm.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardAcceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardJerk.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDFFAccelerationGet(
      string PositionerName,
      out bool ClosedLoopStatus,
      out double KP,
      out double KI,
      out double KD,
      out double KS,
      out double IntegrationTime,
      out double DerivativeFilterCutOffFrequency,
      out double GKP,
      out double GKI,
      out double GKD,
      out double KForm,
      out double KFeedForwardAcceleration,
      out double KFeedForwardJerk,
      out string errstring)
    {
      errstring = string.Empty;
      ClosedLoopStatus = false;
      KP = double.MinValue;
      KI = double.MinValue;
      KD = double.MinValue;
      KS = double.MinValue;
      IntegrationTime = double.MinValue;
      DerivativeFilterCutOffFrequency = double.MinValue;
      GKP = double.MinValue;
      GKI = double.MinValue;
      GKD = double.MinValue;
      KForm = double.MinValue;
      KFeedForwardAcceleration = double.MinValue;
      KFeedForwardJerk = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDFFAccelerationGet) + "(" + (PositionerName.Trim() + ",bool*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 14)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                  ClosedLoopStatus = Convert.ToBoolean(result2);
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KP = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  KI = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  KD = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  KS = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  IntegrationTime = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  DerivativeFilterCutOffFrequency = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  GKP = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                  GKI = result10;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                double result11;
                if (double.TryParse(strArray[10].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result11))
                  GKD = result11;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[10].Trim() + " converstion to double type";
                double result12;
                if (double.TryParse(strArray[11].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result12))
                  KForm = result12;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[11].Trim() + " converstion to double type";
                double result13;
                if (double.TryParse(strArray[12].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result13))
                  KFeedForwardAcceleration = result13;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[12].Trim() + " converstion to double type";
                double result14;
                if (double.TryParse(strArray[13].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result14))
                {
                  KFeedForwardJerk = result14;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[13].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDAccelerationFilterSet(
      string PositionerName,
      bool FilterControlStatus,
      double KD,
      double DerivativeFilterCutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDAccelerationFilterSet) + "(" + (PositionerName.Trim() + "," + (object) Convert.ToInt32(FilterControlStatus) + "," + KD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DerivativeFilterCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDAccelerationFilterGet(
      string PositionerName,
      out bool FilterControlStatus,
      out double KD,
      out double DerivativeFilterCutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      FilterControlStatus = false;
      KD = double.MinValue;
      DerivativeFilterCutOffFrequency = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDAccelerationFilterGet) + "(" + (PositionerName.Trim() + ",bool*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                  FilterControlStatus = Convert.ToBoolean(result2);
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KD = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  DerivativeFilterCutOffFrequency = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorDamperFilterSet(
      string PositionerName,
      double CutOffFrequency,
      double DampingFactor,
      double Gain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorDamperFilterSet) + "(" + (PositionerName.Trim() + "," + CutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DampingFactor.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Gain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorDamperFilterGet(
      string PositionerName,
      out double CutOffFrequency,
      out double DampingFactor,
      out double Gain,
      out string errstring)
    {
      errstring = string.Empty;
      CutOffFrequency = double.MinValue;
      DampingFactor = double.MinValue;
      Gain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorDamperFilterGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CutOffFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  DampingFactor = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  Gain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPostFFSet(
      string PositionerName,
      double PostKFeedForwardAcceleration,
      double PostKFeedForwardJerk,
      double PostKFeedForwardSlope,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPostFFSet) + "(" + (PositionerName.Trim() + "," + PostKFeedForwardAcceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PostKFeedForwardJerk.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PostKFeedForwardSlope.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPostFFGet(
      string PositionerName,
      out double PostKFeedForwardAcceleration,
      out double PostKFeedForwardJerk,
      out double PostKFeedForwardSlope,
      out string errstring)
    {
      errstring = string.Empty;
      PostKFeedForwardAcceleration = double.MinValue;
      PostKFeedForwardJerk = double.MinValue;
      PostKFeedForwardSlope = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPostFFGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PostKFeedForwardAcceleration = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PostKFeedForwardJerk = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PostKFeedForwardSlope = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorExcitationSignalGainSet(
      string PositionerName,
      double ExcitationSignalGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorExcitationSignalGainSet) + "(" + (PositionerName.Trim() + "," + ExcitationSignalGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorExcitationSignalGainGet(
      string PositionerName,
      out double ExcitationSignalGain,
      out string errstring)
    {
      errstring = string.Empty;
      ExcitationSignalGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorExcitationSignalGainGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ExcitationSignalGain = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDBaseSet(
      string PositionerName,
      double MovingMass,
      double StaticMass,
      double Viscosity,
      double Stiffness,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDBaseSet) + "(" + (PositionerName.Trim() + "," + MovingMass.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StaticMass.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Viscosity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Stiffness.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDBaseGet(
      string PositionerName,
      out double MovingMass,
      out double StaticMass,
      out double Viscosity,
      out double Stiffness,
      out string errstring)
    {
      errstring = string.Empty;
      MovingMass = double.MinValue;
      StaticMass = double.MinValue;
      Viscosity = double.MinValue;
      Stiffness = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDBaseGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MovingMass = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  StaticMass = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Viscosity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  Stiffness = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareScanAccelerationLimitGet(
      string PositionerName,
      out double ScanAccelerationLimit,
      out string errstring)
    {
      errstring = string.Empty;
      ScanAccelerationLimit = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareScanAccelerationLimitGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ScanAccelerationLimit = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareScanAccelerationLimitSet(
      string PositionerName,
      double ScanAccelerationLimit,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareScanAccelerationLimitSet) + "(" + (PositionerName.Trim() + "," + ScanAccelerationLimit.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDDualFFVoltageSet(
      string PositionerName,
      bool ClosedLoopStatus,
      double KP,
      double KI,
      double KD,
      double KS,
      double IntegrationTime,
      double DerivativeFilterCutOffFrequency,
      double GKP,
      double GKI,
      double GKD,
      double KForm,
      double KFeedForwardVelocity,
      double KFeedForwardAcceleration,
      double Friction,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDDualFFVoltageSet) + "(" + (PositionerName.Trim() + "," + (object) Convert.ToInt32(ClosedLoopStatus) + "," + KP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KS.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + IntegrationTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DerivativeFilterCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KForm.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardAcceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Friction.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDDualFFVoltageGet(
      string PositionerName,
      out bool ClosedLoopStatus,
      out double KP,
      out double KI,
      out double KD,
      out double KS,
      out double IntegrationTime,
      out double DerivativeFilterCutOffFrequency,
      out double GKP,
      out double GKI,
      out double GKD,
      out double KForm,
      out double KFeedForwardVelocity,
      out double KFeedForwardAcceleration,
      out double Friction,
      out string errstring)
    {
      errstring = string.Empty;
      ClosedLoopStatus = false;
      KP = double.MinValue;
      KI = double.MinValue;
      KD = double.MinValue;
      KS = double.MinValue;
      IntegrationTime = double.MinValue;
      DerivativeFilterCutOffFrequency = double.MinValue;
      GKP = double.MinValue;
      GKI = double.MinValue;
      GKD = double.MinValue;
      KForm = double.MinValue;
      KFeedForwardVelocity = double.MinValue;
      KFeedForwardAcceleration = double.MinValue;
      Friction = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDDualFFVoltageGet) + "(" + (PositionerName.Trim() + ",bool*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 15)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                  ClosedLoopStatus = Convert.ToBoolean(result2);
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KP = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  KI = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  KD = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  KS = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  IntegrationTime = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  DerivativeFilterCutOffFrequency = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  GKP = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                  GKI = result10;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                double result11;
                if (double.TryParse(strArray[10].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result11))
                  GKD = result11;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[10].Trim() + " converstion to double type";
                double result12;
                if (double.TryParse(strArray[11].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result12))
                  KForm = result12;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[11].Trim() + " converstion to double type";
                double result13;
                if (double.TryParse(strArray[12].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result13))
                  KFeedForwardVelocity = result13;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[12].Trim() + " converstion to double type";
                double result14;
                if (double.TryParse(strArray[13].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result14))
                  KFeedForwardAcceleration = result14;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[13].Trim() + " converstion to double type";
                double result15;
                if (double.TryParse(strArray[14].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result15))
                {
                  Friction = result15;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[14].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDFFVelocitySet(
      string PositionerName,
      bool ClosedLoopStatus,
      double KP,
      double KI,
      double KD,
      double KS,
      double IntegrationTime,
      double DerivativeFilterCutOffFrequency,
      double GKP,
      double GKI,
      double GKD,
      double KForm,
      double KFeedForwardVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDFFVelocitySet) + "(" + (PositionerName.Trim() + "," + (object) Convert.ToInt32(ClosedLoopStatus) + "," + KP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KS.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + IntegrationTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DerivativeFilterCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + GKD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KForm.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIDFFVelocityGet(
      string PositionerName,
      out bool ClosedLoopStatus,
      out double KP,
      out double KI,
      out double KD,
      out double KS,
      out double IntegrationTime,
      out double DerivativeFilterCutOffFrequency,
      out double GKP,
      out double GKI,
      out double GKD,
      out double KForm,
      out double KFeedForwardVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      ClosedLoopStatus = false;
      KP = double.MinValue;
      KI = double.MinValue;
      KD = double.MinValue;
      KS = double.MinValue;
      IntegrationTime = double.MinValue;
      DerivativeFilterCutOffFrequency = double.MinValue;
      GKP = double.MinValue;
      GKI = double.MinValue;
      GKD = double.MinValue;
      KForm = double.MinValue;
      KFeedForwardVelocity = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIDFFVelocityGet) + "(" + (PositionerName.Trim() + ",bool*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 13)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                  ClosedLoopStatus = Convert.ToBoolean(result2);
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KP = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  KI = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  KD = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  KS = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  IntegrationTime = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  DerivativeFilterCutOffFrequency = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  GKP = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                  GKI = result10;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                double result11;
                if (double.TryParse(strArray[10].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result11))
                  GKD = result11;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[10].Trim() + " converstion to double type";
                double result12;
                if (double.TryParse(strArray[11].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result12))
                  KForm = result12;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[11].Trim() + " converstion to double type";
                double result13;
                if (double.TryParse(strArray[12].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result13))
                {
                  KFeedForwardVelocity = result13;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[12].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIPositionSet(
      string PositionerName,
      bool ClosedLoopStatus,
      double KP,
      double KI,
      double IntegrationTime,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIPositionSet) + "(" + (PositionerName.Trim() + "," + (object) Convert.ToInt32(ClosedLoopStatus) + "," + KP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + IntegrationTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorPIPositionGet(
      string PositionerName,
      out bool ClosedLoopStatus,
      out double KP,
      out double KI,
      out double IntegrationTime,
      out string errstring)
    {
      errstring = string.Empty;
      ClosedLoopStatus = false;
      KP = double.MinValue;
      KI = double.MinValue;
      IntegrationTime = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorPIPositionGet) + "(" + (PositionerName.Trim() + ",bool*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                  ClosedLoopStatus = Convert.ToBoolean(result2);
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KP = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  KI = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  IntegrationTime = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorDualSet(
      string PositionerName,
      bool ClosedLoopStatus,
      double KP,
      double KI,
      double KD,
      double IntegrationTime,
      double DerivativeFilterCutOffFrequency,
      double KFeedForwardAcceleration,
      double KFeedForwardJerk,
      double AntiWindUpTime,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorDualSet) + "(" + (PositionerName.Trim() + "," + (object) Convert.ToInt32(ClosedLoopStatus) + "," + KP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KD.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + IntegrationTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DerivativeFilterCutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardAcceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedForwardJerk.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + AntiWindUpTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorDualGet(
      string PositionerName,
      out bool ClosedLoopStatus,
      out double KP,
      out double KI,
      out double KD,
      out double IntegrationTime,
      out double DerivativeFilterCutOffFrequency,
      out double KFeedForwardAcceleration,
      out double KFeedForwardJerk,
      out double AntiWindUpTime,
      out string errstring)
    {
      errstring = string.Empty;
      ClosedLoopStatus = false;
      KP = double.MinValue;
      KI = double.MinValue;
      KD = double.MinValue;
      IntegrationTime = double.MinValue;
      DerivativeFilterCutOffFrequency = double.MinValue;
      KFeedForwardAcceleration = double.MinValue;
      KFeedForwardJerk = double.MinValue;
      AntiWindUpTime = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorDualGet) + "(" + (PositionerName.Trim() + ",bool*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 10)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                  ClosedLoopStatus = Convert.ToBoolean(result2);
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  KP = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  KI = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  KD = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  IntegrationTime = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  DerivativeFilterCutOffFrequency = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  KFeedForwardAcceleration = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  KFeedForwardJerk = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                {
                  AntiWindUpTime = result10;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDualLoopNotchFilterSet(
      string PositionerName,
      int NotchNumber,
      double NotchFrequency,
      double NotchBandwidth,
      double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDualLoopNotchFilterSet) + "(" + (PositionerName.Trim() + "," + NotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDualLoopNotchFilterGet(
      string PositionerName,
      int NotchNumber,
      out double NotchFrequency,
      out double NotchBandwidth,
      out double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency = double.MinValue;
      NotchBandwidth = double.MinValue;
      NotchGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDualLoopNotchFilterGet) + "(" + (PositionerName.Trim() + "," + NotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  NotchGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDualLoopPhaseCorrectionFilterSet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      double PhaseCorrectionFn,
      double PhaseCorrectionFd,
      double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDualLoopPhaseCorrectionFilterSet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFn.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFd.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationDualLoopPhaseCorrectionFilterGet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      out double PhaseCorrectionFn,
      out double PhaseCorrectionFd,
      out double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      PhaseCorrectionFn = double.MinValue;
      PhaseCorrectionFd = double.MinValue;
      PhaseCorrectionGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationDualLoopPhaseCorrectionFilterGet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PhaseCorrectionFn = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PhaseCorrectionFd = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PhaseCorrectionGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerDriverFiltersGet(
      string PositionerName,
      out double KI,
      out double NotchFrequency,
      out double NotchBandwidth,
      out double NotchGain,
      out double LowpassFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      KI = double.MinValue;
      NotchFrequency = double.MinValue;
      NotchBandwidth = double.MinValue;
      NotchGain = double.MinValue;
      LowpassFrequency = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerDriverFiltersGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  KI = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchFrequency = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  NotchBandwidth = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  NotchGain = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  LowpassFrequency = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerDriverFiltersSet(
      string PositionerName,
      double KI,
      double NotchFrequency,
      double NotchBandwidth,
      double NotchGain,
      double LowpassFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerDriverFiltersSet) + "(" + (PositionerName.Trim() + "," + KI.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + LowpassFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerDriverPositionOffsetsGet(
      string PositionerName,
      out double StagePositionOffset,
      out double GagePositionOffset,
      out string errstring)
    {
      errstring = string.Empty;
      StagePositionOffset = double.MinValue;
      GagePositionOffset = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerDriverPositionOffsetsGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StagePositionOffset = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  GagePositionOffset = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPreCorrectorExcitationSignalGet(
      string PositionerName,
      out double Frequency,
      out double Amplitude,
      out double Time,
      out string errstring)
    {
      errstring = string.Empty;
      Frequency = double.MinValue;
      Amplitude = double.MinValue;
      Time = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPreCorrectorExcitationSignalGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Frequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Amplitude = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  Time = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPreCorrectorExcitationSignalSet(
      string PositionerName,
      double Frequency,
      double Amplitude,
      double Time,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPreCorrectorExcitationSignalSet) + "(" + (PositionerName.Trim() + "," + Frequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Amplitude.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Time.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerBacklashSet(
      string PositionerName,
      double BacklashValue,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerBacklashSet) + "(" + (PositionerName.Trim() + "," + BacklashValue.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerBacklashGet(
      string PositionerName,
      out double BacklashValue,
      out string BacklaskStatus,
      out string errstring)
    {
      errstring = string.Empty;
      BacklashValue = double.MinValue;
      BacklaskStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerBacklashGet) + "(" + (PositionerName.Trim() + ",double*,char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  BacklashValue = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                BacklaskStatus = strArray[2].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerBacklashEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerBacklashEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerBacklashDisable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerBacklashDisable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotionDoneGet(
      string PositionerName,
      out double PositionWindow,
      out double VelocityWindow,
      out double CheckingTime,
      out double MeanPeriod,
      out double TimeOut,
      out string errstring)
    {
      errstring = string.Empty;
      PositionWindow = double.MinValue;
      VelocityWindow = double.MinValue;
      CheckingTime = double.MinValue;
      MeanPeriod = double.MinValue;
      TimeOut = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotionDoneGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PositionWindow = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  VelocityWindow = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  CheckingTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  MeanPeriod = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  TimeOut = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotionDoneSet(
      string PositionerName,
      double PositionWindow,
      double VelocityWindow,
      double CheckingTime,
      double MeanPeriod,
      double TimeOut,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotionDoneSet) + "(" + (PositionerName.Trim() + "," + PositionWindow.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + VelocityWindow.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + CheckingTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MeanPeriod.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeOut.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerHardInterpolatorFactorGet(
      string PositionerName,
      out int InterpolationFactor,
      out string errstring)
    {
      errstring = string.Empty;
      InterpolationFactor = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerHardInterpolatorFactorGet) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  InterpolationFactor = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerHardInterpolatorFactorSet(
      string PositionerName,
      int InterpolationFactor,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerHardInterpolatorFactorSet) + "(" + (PositionerName.Trim() + "," + InterpolationFactor.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerHardInterpolatorPositionGet(
      string PositionerName,
      out double Position,
      out string errstring)
    {
      errstring = string.Empty;
      Position = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerHardInterpolatorPositionGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Position = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareGet(
      string PositionerName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double PositionStep,
      out bool EnableState,
      out string errstring)
    {
      errstring = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      PositionStep = double.MinValue;
      EnableState = false;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,bool*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  PositionStep = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), out result5))
                {
                  EnableState = Convert.ToBoolean(result5);
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to bool type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareSet(
      string PositionerName,
      double MinimumPosition,
      double MaximumPosition,
      double PositionStep,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareSet) + "(" + (PositionerName.Trim() + "," + MinimumPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaximumPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionStep.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareDisable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareDisable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareAquadBAlwaysEnable(
      string PositionerName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareAquadBAlwaysEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareAquadBWindowedGet(
      string PositionerName,
      out double MinimumPosition,
      out double MaximumPosition,
      out bool EnableState,
      out string errstring)
    {
      errstring = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      EnableState = false;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareAquadBWindowedGet) + "(" + (PositionerName.Trim() + ",double*,double*,bool*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), out result4))
                {
                  EnableState = Convert.ToBoolean(result4);
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to bool type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareAquadBWindowedSet(
      string PositionerName,
      double MinimumPosition,
      double MaximumPosition,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareAquadBWindowedSet) + "(" + (PositionerName.Trim() + "," + MinimumPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaximumPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerTimeFlasherGet(
      string PositionerName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double PositionStep,
      out bool EnableState,
      out string errstring)
    {
      errstring = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      PositionStep = double.MinValue;
      EnableState = false;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerTimeFlasherGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,bool*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  PositionStep = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                int result5;
                if (int.TryParse(strArray[4].Trim(), out result5))
                {
                  EnableState = Convert.ToBoolean(result5);
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to bool type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerTimeFlasherSet(
      string PositionerName,
      double MinimumPosition,
      double MaximumPosition,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerTimeFlasherSet) + "(" + (PositionerName.Trim() + "," + MinimumPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaximumPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerTimeFlasherEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerTimeFlasherEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerTimeFlasherDisable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerTimeFlasherDisable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionComparePulseParametersGet(
      string PositionerName,
      out double PCOPulseWidth,
      out double EncoderSettlingTimeISAOnly,
      out string errstring)
    {
      errstring = string.Empty;
      PCOPulseWidth = double.MinValue;
      EncoderSettlingTimeISAOnly = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionComparePulseParametersGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PCOPulseWidth = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  EncoderSettlingTimeISAOnly = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionComparePulseParametersSet(
      string PositionerName,
      double PCOPulseWidth,
      double EncoderSettlingTimeISAOnly,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionComparePulseParametersSet) + "(" + (PositionerName.Trim() + "," + PCOPulseWidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + EncoderSettlingTimeISAOnly.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareAquadBPrescalerSet(
      string PositionerName,
      double PCOInterpolationFactor,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareAquadBPrescalerSet) + "(" + (PositionerName.Trim() + "," + PCOInterpolationFactor.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerPositionCompareAquadBPrescalerGet(
      string PositionerName,
      out double PCOInterpolationFactor,
      out string errstring)
    {
      errstring = string.Empty;
      PCOInterpolationFactor = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerPositionCompareAquadBPrescalerGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  PCOInterpolationFactor = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOAbort(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOAbort) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOCurrentStatusGet(
      string PositionerName,
      out int Status,
      out string errstring)
    {
      errstring = string.Empty;
      Status = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOCurrentStatusGet) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Status = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOFromFile(
      string PositionerName,
      string DataFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOFromFile) + "(" + (PositionerName.Trim() + "," + DataFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOLoadToMemory(
      string PositionerName,
      string DataLines,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOLoadToMemory) + "(" + (PositionerName.Trim() + "," + DataLines.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOMemoryReset(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOMemoryReset) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOPrepare(
      string PositionerName,
      int ScanDirection,
      double[] StartPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = PositionerName.Trim() + "," + ScanDirection.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (PositionerCompensatedPCOPrepare) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = StartPosition[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedPCOSet(
      string PositionerName,
      double Start,
      double Stop,
      double Distance,
      double Width,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedPCOSet) + "(" + (PositionerName.Trim() + "," + Start.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Stop.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Distance.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Width.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOAbort(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOAbort) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOCurrentStatusGet(
      string PositionerName,
      out int Status,
      out string errstring)
    {
      errstring = string.Empty;
      Status = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOCurrentStatusGet) + "(" + (PositionerName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Status = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOFromFile(
      string PositionerName,
      string DataFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOFromFile) + "(" + (PositionerName.Trim() + "," + DataFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOLoadToMemory(
      string PositionerName,
      string DataLines,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOLoadToMemory) + "(" + (PositionerName.Trim() + "," + DataLines.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOMemoryReset(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOMemoryReset) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOPrepare(
      string PositionerName,
      int ScanDirection,
      double[] StartPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = PositionerName.Trim() + "," + ScanDirection.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (PositionerCompensatedFastPCOPrepare) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = StartPosition[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOSet(
      string PositionerName,
      double Start,
      double Stop,
      double Step,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOSet) + "(" + (PositionerName.Trim() + "," + Start.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Stop.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOPulseParametersGet(
      string PositionerName,
      out double PulseWidth,
      out int PulsePolarity,
      out bool PulseToggle,
      out string errstring)
    {
      errstring = string.Empty;
      PulseWidth = double.MinValue;
      PulsePolarity = int.MinValue;
      PulseToggle = false;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOPulseParametersGet) + "(" + (PositionerName.Trim() + ",double*,int*,bool*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PulseWidth = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PulsePolarity = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                int result4;
                if (int.TryParse(strArray[3].Trim(), out result4))
                {
                  PulseToggle = Convert.ToBoolean(result4);
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to bool type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensatedFastPCOPulseParametersSet(
      string PositionerName,
      double PulseWidth,
      int PulsePolarity,
      bool PulseToggle,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensatedFastPCOPulseParametersSet) + "(" + (PositionerName.Trim() + "," + PulseWidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PulsePolarity.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + (object) Convert.ToInt32(PulseToggle)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationEncoderNotchFilterSet(
      string PositionerName,
      int NotchNumber,
      double NotchFrequency,
      double NotchBandwidth,
      double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationEncoderNotchFilterSet) + "(" + (PositionerName.Trim() + "," + NotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationEncoderNotchFilterGet(
      string PositionerName,
      int NotchNumber,
      out double NotchFrequency,
      out double NotchBandwidth,
      out double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency = double.MinValue;
      NotchBandwidth = double.MinValue;
      NotchGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationEncoderNotchFilterGet) + "(" + (PositionerName.Trim() + "," + NotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  NotchGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationNotchFilterSet(
      string PositionerName,
      int NotchNumber,
      double NotchFrequency,
      double NotchBandwidth,
      double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationNotchFilterSet) + "(" + (PositionerName.Trim() + "," + NotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationNotchFilterGet(
      string PositionerName,
      int NotchNumber,
      out double NotchFrequency,
      out double NotchBandwidth,
      out double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency = double.MinValue;
      NotchBandwidth = double.MinValue;
      NotchGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationNotchFilterGet) + "(" + (PositionerName.Trim() + "," + NotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  NotchGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPhaseCorrectionFilterSet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      double PhaseCorrectionFn,
      double PhaseCorrectionFd,
      double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPhaseCorrectionFilterSet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFn.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFd.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPhaseCorrectionFilterGet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      out double PhaseCorrectionFn,
      out double PhaseCorrectionFd,
      out double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      PhaseCorrectionFn = double.MinValue;
      PhaseCorrectionFd = double.MinValue;
      PhaseCorrectionGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPhaseCorrectionFilterGet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PhaseCorrectionFn = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PhaseCorrectionFd = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PhaseCorrectionGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorNotchFiltersSet(
      string PositionerName,
      double NotchFrequency1,
      double NotchBandwidth1,
      double NotchGain1,
      double NotchFrequency2,
      double NotchBandwidth2,
      double NotchGain2,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorNotchFiltersSet) + "(" + (PositionerName.Trim() + "," + NotchFrequency1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCorrectorNotchFiltersGet(
      string PositionerName,
      out double NotchFrequency1,
      out double NotchBandwidth1,
      out double NotchGain1,
      out double NotchFrequency2,
      out double NotchBandwidth2,
      out double NotchGain2,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency1 = double.MinValue;
      NotchBandwidth1 = double.MinValue;
      NotchGain1 = double.MinValue;
      NotchFrequency2 = double.MinValue;
      NotchBandwidth2 = double.MinValue;
      NotchGain2 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCorrectorNotchFiltersGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth1 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  NotchGain1 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  NotchFrequency2 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  NotchBandwidth2 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  NotchGain2 = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPreFeedForwardFrequencyNotchFilterGet(
      string PositionerName,
      int NotchFrequencyNumber,
      out double NotchFrequency,
      out double NotchBandwidth,
      out double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency = double.MinValue;
      NotchBandwidth = double.MinValue;
      NotchGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPreFeedForwardFrequencyNotchFilterGet) + "(" + (PositionerName.Trim() + "," + NotchFrequencyNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  NotchGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPreFeedForwardFrequencyNotchFilterSet(
      string PositionerName,
      int NotchFrequencyNumber,
      double NotchFrequency,
      double NotchBandwidth,
      double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPreFeedForwardFrequencyNotchFilterSet) + "(" + (PositionerName.Trim() + "," + NotchFrequencyNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPreFeedForwardSpatialNotchFilterGet(
      string PositionerName,
      int SpatialNotchNumber,
      out double SpatialNotchStep,
      out double SpatialNotchBandwidth,
      out double SpatialNotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      SpatialNotchStep = double.MinValue;
      SpatialNotchBandwidth = double.MinValue;
      SpatialNotchGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPreFeedForwardSpatialNotchFilterGet) + "(" + (PositionerName.Trim() + "," + SpatialNotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  SpatialNotchStep = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SpatialNotchBandwidth = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  SpatialNotchGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPreFeedForwardSpatialNotchFilterSet(
      string PositionerName,
      int SpatialNotchNumber,
      double SpatialNotchStep,
      double SpatialNotchBandwidth,
      double SpatialNotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPreFeedForwardSpatialNotchFilterSet) + "(" + (PositionerName.Trim() + "," + SpatialNotchNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchStep.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPreFeedForwardPhaseCorrectionFilterGet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      out double PhaseCorrectionFn,
      out double PhaseCorrectionFd,
      out double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      PhaseCorrectionFn = double.MinValue;
      PhaseCorrectionFd = double.MinValue;
      PhaseCorrectionGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPreFeedForwardPhaseCorrectionFilterGet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PhaseCorrectionFn = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PhaseCorrectionFd = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PhaseCorrectionGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPreFeedForwardPhaseCorrectionFilterSet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      double PhaseCorrectionFn,
      double PhaseCorrectionFd,
      double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPreFeedForwardPhaseCorrectionFilterSet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFn.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFd.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationFrequencyNotchsGet(
      string PositionerName,
      out double NotchFrequency1,
      out double NotchBandwidth1,
      out double NotchGain1,
      out double NotchFrequency2,
      out double NotchBandwidth2,
      out double NotchGain2,
      out double NotchFrequency3,
      out double NotchBandwidth3,
      out double NotchGain3,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency1 = double.MinValue;
      NotchBandwidth1 = double.MinValue;
      NotchGain1 = double.MinValue;
      NotchFrequency2 = double.MinValue;
      NotchBandwidth2 = double.MinValue;
      NotchGain2 = double.MinValue;
      NotchFrequency3 = double.MinValue;
      NotchBandwidth3 = double.MinValue;
      NotchGain3 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationFrequencyNotchsGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 10)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth1 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  NotchGain1 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  NotchFrequency2 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  NotchBandwidth2 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  NotchGain2 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  NotchFrequency3 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  NotchBandwidth3 = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                {
                  NotchGain3 = result10;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationFrequencyNotchsSet(
      string PositionerName,
      double NotchFrequency1,
      double NotchBandwidth1,
      double NotchGain1,
      double NotchFrequency2,
      double NotchBandwidth2,
      double NotchGain2,
      double NotchFrequency3,
      double NotchBandwidth3,
      double NotchGain3,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationFrequencyNotchsSet) + "(" + (PositionerName.Trim() + "," + NotchFrequency1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationSpatialPeriodicNotchsGet(
      string PositionerName,
      out double SpatialNotchStep1,
      out double SpatialNotchBandwidth1,
      out double SpatialNotchGain1,
      out double SpatialNotchStep2,
      out double SpatialNotchBandwidth2,
      out double SpatialNotchGain2,
      out double SpatialNotchStep3,
      out double SpatialNotchBandwidth3,
      out double SpatialNotchGain3,
      out string errstring)
    {
      errstring = string.Empty;
      SpatialNotchStep1 = double.MinValue;
      SpatialNotchBandwidth1 = double.MinValue;
      SpatialNotchGain1 = double.MinValue;
      SpatialNotchStep2 = double.MinValue;
      SpatialNotchBandwidth2 = double.MinValue;
      SpatialNotchGain2 = double.MinValue;
      SpatialNotchStep3 = double.MinValue;
      SpatialNotchBandwidth3 = double.MinValue;
      SpatialNotchGain3 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationSpatialPeriodicNotchsGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 10)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  SpatialNotchStep1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SpatialNotchBandwidth1 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SpatialNotchGain1 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  SpatialNotchStep2 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  SpatialNotchBandwidth2 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  SpatialNotchGain2 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  SpatialNotchStep3 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  SpatialNotchBandwidth3 = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                {
                  SpatialNotchGain3 = result10;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationSpatialPeriodicNotchsSet(
      string PositionerName,
      double SpatialNotchStep1,
      double SpatialNotchBandwidth1,
      double SpatialNotchGain1,
      double SpatialNotchStep2,
      double SpatialNotchBandwidth2,
      double SpatialNotchGain2,
      double SpatialNotchStep3,
      double SpatialNotchBandwidth3,
      double SpatialNotchGain3,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationSpatialPeriodicNotchsSet) + "(" + (PositionerName.Trim() + "," + SpatialNotchStep1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchBandwidth1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchGain1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchStep2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchBandwidth2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchGain2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchStep3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchBandwidth3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SpatialNotchGain3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationLowPassFilterGet(
      string PositionerName,
      out double CutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      CutOffFrequency = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationLowPassFilterGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CutOffFrequency = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationLowPassFilterSet(
      string PositionerName,
      double CutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationLowPassFilterSet) + "(" + (PositionerName.Trim() + "," + CutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationFrequencyNotchFilterGet(
      string PositionerName,
      int NotchFrequencyNumber,
      out double NotchFrequency,
      out double NotchBandwidth,
      out double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      NotchFrequency = double.MinValue;
      NotchBandwidth = double.MinValue;
      NotchGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationFrequencyNotchFilterGet) + "(" + (PositionerName.Trim() + "," + NotchFrequencyNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchFrequency = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchBandwidth = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  NotchGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationFrequencyNotchFilterSet(
      string PositionerName,
      int NotchFrequencyNumber,
      double NotchFrequency,
      double NotchBandwidth,
      double NotchGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationFrequencyNotchFilterSet) + "(" + (PositionerName.Trim() + "," + NotchFrequencyNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchBandwidth.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationNotchModeFilterGet(
      string PositionerName,
      int NotchModeNumber,
      out double NotchModeFr,
      out double NotchModeFa,
      out double NotchModeZr,
      out double NotchModeZa,
      out string errstring)
    {
      errstring = string.Empty;
      NotchModeFr = double.MinValue;
      NotchModeFa = double.MinValue;
      NotchModeZr = double.MinValue;
      NotchModeZa = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationNotchModeFilterGet) + "(" + (PositionerName.Trim() + "," + NotchModeNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchModeFr = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchModeFa = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  NotchModeZr = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  NotchModeZa = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationNotchModeFilterSet(
      string PositionerName,
      int NotchModeNumber,
      double NotchModeFr,
      double NotchModeFa,
      double NotchModeZr,
      double NotchModeZa,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationNotchModeFilterSet) + "(" + (PositionerName.Trim() + "," + NotchModeNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeFr.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeFa.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeZr.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeZa.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationPhaseCorrectionFilterGet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      out double PhaseCorrectionFn,
      out double PhaseCorrectionFd,
      out double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      PhaseCorrectionFn = double.MinValue;
      PhaseCorrectionFd = double.MinValue;
      PhaseCorrectionGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationPhaseCorrectionFilterGet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PhaseCorrectionFn = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PhaseCorrectionFd = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PhaseCorrectionGain = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPostExcitationPhaseCorrectionFilterSet(
      string PositionerName,
      int PhaseCorrectionFilterNumber,
      double PhaseCorrectionFn,
      double PhaseCorrectionFd,
      double PhaseCorrectionGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPostExcitationPhaseCorrectionFilterSet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFilterNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFn.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFd.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationLowPassTwoFilterGet(
      string PositionerName,
      out double CutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      CutOffFrequency = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationLowPassTwoFilterGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CutOffFrequency = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationLowPassTwoFilterSet(
      string PositionerName,
      double CutOffFrequency,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationLowPassTwoFilterSet) + "(" + (PositionerName.Trim() + "," + CutOffFrequency.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationNotchModeFiltersGet(
      string PositionerName,
      out double NotchModeFr1,
      out double NotchModeFa1,
      out double NotchModeZr1,
      out double NotchModeZa1,
      out double NotchModeFr2,
      out double NotchModeFa2,
      out double NotchModeZr2,
      out double NotchModeZa2,
      out string errstring)
    {
      errstring = string.Empty;
      NotchModeFr1 = double.MinValue;
      NotchModeFa1 = double.MinValue;
      NotchModeZr1 = double.MinValue;
      NotchModeZa1 = double.MinValue;
      NotchModeFr2 = double.MinValue;
      NotchModeFa2 = double.MinValue;
      NotchModeZr2 = double.MinValue;
      NotchModeZa2 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationNotchModeFiltersGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 9)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  NotchModeFr1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  NotchModeFa1 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  NotchModeZr1 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  NotchModeZa1 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  NotchModeFr2 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  NotchModeFa2 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  NotchModeZr2 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                {
                  NotchModeZa2 = result9;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationNotchModeFiltersSet(
      string PositionerName,
      double NotchModeFr1,
      double NotchModeFa1,
      double NotchModeZr1,
      double NotchModeZa1,
      double NotchModeFr2,
      double NotchModeFa2,
      double NotchModeZr2,
      double NotchModeZa2,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationNotchModeFiltersSet) + "(" + (PositionerName.Trim() + "," + NotchModeFr1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeFa1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeZr1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeZa1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeFr2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeFa2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeZr2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + NotchModeZa2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPhaseCorrectionFiltersGet(
      string PositionerName,
      out double PhaseCorrectionFn1,
      out double PhaseCorrectionFd1,
      out double PhaseCorrectionGain1,
      out double PhaseCorrectionFn2,
      out double PhaseCorrectionFd2,
      out double PhaseCorrectionGain2,
      out string errstring)
    {
      errstring = string.Empty;
      PhaseCorrectionFn1 = double.MinValue;
      PhaseCorrectionFd1 = double.MinValue;
      PhaseCorrectionGain1 = double.MinValue;
      PhaseCorrectionFn2 = double.MinValue;
      PhaseCorrectionFd2 = double.MinValue;
      PhaseCorrectionGain2 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPhaseCorrectionFiltersGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PhaseCorrectionFn1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PhaseCorrectionFd1 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  PhaseCorrectionGain1 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  PhaseCorrectionFn2 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  PhaseCorrectionFd2 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  PhaseCorrectionGain2 = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerCompensationPhaseCorrectionFiltersSet(
      string PositionerName,
      double PhaseCorrectionFn1,
      double PhaseCorrectionFd1,
      double PhaseCorrectionGain1,
      double PhaseCorrectionFn2,
      double PhaseCorrectionFd2,
      double PhaseCorrectionGain2,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerCompensationPhaseCorrectionFiltersSet) + "(" + (PositionerName.Trim() + "," + PhaseCorrectionFn1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFd1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionGain1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFn2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionFd2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PhaseCorrectionGain2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerAnalogTrackingPositionParametersGet(
      string PositionerName,
      out string GPIOName,
      out double Offset,
      out double Scale,
      out double Velocity,
      out double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      GPIOName = string.Empty;
      Offset = double.MinValue;
      Scale = double.MinValue;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerAnalogTrackingPositionParametersGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                GPIOName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Offset = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Scale = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Velocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  Acceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerAnalogTrackingPositionParametersSet(
      string PositionerName,
      string GPIOName,
      double Offset,
      double Scale,
      double Velocity,
      double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerAnalogTrackingPositionParametersSet) + "(" + (PositionerName.Trim() + "," + GPIOName.Trim() + "," + Offset.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Scale.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerAnalogTrackingVelocityParametersGet(
      string PositionerName,
      out string GPIOName,
      out double Offset,
      out double Scale,
      out double DeadBandThreshold,
      out int Order,
      out double Velocity,
      out double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      GPIOName = string.Empty;
      Offset = double.MinValue;
      Scale = double.MinValue;
      DeadBandThreshold = double.MinValue;
      Order = int.MinValue;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerAnalogTrackingVelocityParametersGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,int*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 8)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                GPIOName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Offset = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Scale = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  DeadBandThreshold = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                int result5;
                if (int.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  Order = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to Int32 type";
                double result6;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  Velocity = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  Acceleration = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerAnalogTrackingVelocityParametersSet(
      string PositionerName,
      string GPIOName,
      double Offset,
      double Scale,
      double DeadBandThreshold,
      int Order,
      double Velocity,
      double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerAnalogTrackingVelocityParametersSet) + "(" + (PositionerName.Trim() + "," + GPIOName.Trim() + "," + Offset.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Scale.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DeadBandThreshold.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Order.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerJogMaximumVelocityAndAccelerationGet(
      string PositionerName,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerJogMaximumVelocityAndAccelerationGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MaximumVelocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  MaximumAcceleration = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMaximumVelocityAndAccelerationGet(
      string PositionerName,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMaximumVelocityAndAccelerationGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MaximumVelocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  MaximumAcceleration = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerUserTravelLimitsGet(
      string PositionerName,
      out double UserMinimumTarget,
      out double UserMaximumTarget,
      out string errstring)
    {
      errstring = string.Empty;
      UserMinimumTarget = double.MinValue;
      UserMaximumTarget = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerUserTravelLimitsGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  UserMinimumTarget = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  UserMaximumTarget = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerUserTravelLimitsSet(
      string PositionerName,
      double UserMinimumTarget,
      double UserMaximumTarget,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerUserTravelLimitsSet) + "(" + (PositionerName.Trim() + "," + UserMinimumTarget.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + UserMaximumTarget.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerSGammaExactVelocityAjustedDisplacementGet(
      string PositionerName,
      double DesiredDisplacement,
      out double AdjustedDisplacement,
      out string errstring)
    {
      errstring = string.Empty;
      AdjustedDisplacement = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerSGammaExactVelocityAjustedDisplacementGet) + "(" + (PositionerName.Trim() + "," + DesiredDisplacement.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  AdjustedDisplacement = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerSGammaMoveResultGet(
      string PositionerName,
      out double TimeToAccelerate,
      out double RealAcceleration,
      out double DistanceToAccelerate,
      out double TimeAtConstantSpeed,
      out double RealVelocity,
      out double DistanceAtConstantSpeed,
      out double TotalTimeToMove,
      out double DistanceToDecelerate,
      out double ExecutedDisplacement,
      out string errstring)
    {
      errstring = string.Empty;
      TimeToAccelerate = double.MinValue;
      RealAcceleration = double.MinValue;
      DistanceToAccelerate = double.MinValue;
      TimeAtConstantSpeed = double.MinValue;
      RealVelocity = double.MinValue;
      DistanceAtConstantSpeed = double.MinValue;
      TotalTimeToMove = double.MinValue;
      DistanceToDecelerate = double.MinValue;
      ExecutedDisplacement = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerSGammaMoveResultGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 10)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  TimeToAccelerate = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  RealAcceleration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  DistanceToAccelerate = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  TimeAtConstantSpeed = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  RealVelocity = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  DistanceAtConstantSpeed = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  TotalTimeToMove = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  DistanceToDecelerate = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                {
                  ExecutedDisplacement = result10;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerSGammaParametersGet(
      string PositionerName,
      out double Velocity,
      out double Acceleration,
      out double MinimumTjerkTime,
      out double MaximumTjerkTime,
      out string errstring)
    {
      errstring = string.Empty;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      MinimumTjerkTime = double.MinValue;
      MaximumTjerkTime = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerSGammaParametersGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Velocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Acceleration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MinimumTjerkTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumTjerkTime = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerSGammaParametersSet(
      string PositionerName,
      double Velocity,
      double Acceleration,
      double MinimumTjerkTime,
      double MaximumTjerkTime,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerSGammaParametersSet) + "(" + (PositionerName.Trim() + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MinimumTjerkTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaximumTjerkTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerSGammaVelocityAndAccelerationSet(
      string PositionerName,
      double Velocity,
      double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerSGammaVelocityAndAccelerationSet) + "(" + (PositionerName.Trim() + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerSGammaPreviousMotionTimesGet(
      string PositionerName,
      out double SettingTime,
      out double SettlingTime,
      out string errstring)
    {
      errstring = string.Empty;
      SettingTime = double.MinValue;
      SettlingTime = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerSGammaPreviousMotionTimesGet) + "(" + (PositionerName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  SettingTime = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  SettlingTime = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTVerification(
      string GroupName,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTLoadToMemory(
      string GroupName,
      string TrajectoryPart,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTVerification(string GroupName, string TrajectoryFileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTLoadToMemory(string GroupName, string TrajectoryPart, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTVerification(string GroupName, string TrajectoryFileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTLoadToMemory(string GroupName, string TrajectoryPart, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTVerification(
      string GroupName,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTSave(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTSave) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTLoadToMemory(
      string GroupName,
      string TrajectoryPart,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOLoadFromXYPT(
      string GroupName,
      string TrajectoryFileName,
      double Step,
      double StartPositionX,
      double StartPositionY,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOLoadFromXYPT) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOLoadFromXYPTWithPulses(
      string GroupName,
      string TrajectoryFileName,
      double StartPositionX,
      double StartPositionY,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOLoadFromXYPTWithPulses) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + StartPositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTVerification(
      string GroupName,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTLoadToMemory(
      string GroupName,
      string TrajectoryPart,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesPVTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesPVTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTVerification(string GroupName, string TrajectoryFileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTLoadToMemory(string GroupName, string TrajectoryPart, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYPVTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYPVTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTVerification(string GroupName, string TrajectoryFileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTLoadToMemory(string GroupName, string TrajectoryPart, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZPVTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZPVTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTVerification(
      string GroupName,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTExecution(
      string GroupName,
      string TrajectoryFileName,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTParametersGet(
      string GroupName,
      out string FileName,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTParametersGet) + "(" + (GroupName.Trim() + ",char*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                int result2;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CurrentElementNumber = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTPulseOutputSet(
      string GroupName,
      int StartElement,
      int EndElement,
      double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EndElement.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + TimeInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTPulseOutputGet(
      string GroupName,
      out int StartElement,
      out int EndElement,
      out double TimeInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartElement = int.MinValue;
      EndElement = int.MinValue;
      TimeInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTPulseOutputGet) + "(" + (GroupName.Trim() + ",int*,int*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartElement = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndElement = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  TimeInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTSave(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTSave) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTLoadToMemory(
      string GroupName,
      string TrajectoryPart,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTLoadToMemory) + "(" + (GroupName.Trim() + "," + TrajectoryPart.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodLegsPVTResetInMemory(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodLegsPVTResetInMemory) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYLineArcVerification(
      string GroupName,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYLineArcVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYLineArcVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYLineArcVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYLineArcExecution(
      string GroupName,
      string TrajectoryFileName,
      double Velocity,
      double Acceleration,
      int ExecutionNumber,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYLineArcExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYLineArcParametersGet(
      string GroupName,
      out string FileName,
      out double Velocity,
      out double Acceleration,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYLineArcParametersGet) + "(" + (GroupName.Trim() + ",char*,double*,double*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Velocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Acceleration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                int result4;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  CurrentElementNumber = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYLineArcPulseOutputSet(
      string GroupName,
      double StartLength,
      double EndLength,
      double PathLengthInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYLineArcPulseOutputSet) + "(" + (GroupName.Trim() + "," + StartLength.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + EndLength.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PathLengthInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYLineArcPulseOutputGet(
      string GroupName,
      out double StartLength,
      out double EndLength,
      out double PathLengthInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartLength = double.MinValue;
      EndLength = double.MinValue;
      PathLengthInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYLineArcPulseOutputGet) + "(" + (GroupName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartLength = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndLength = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PathLengthInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOLoadFromXYLineArc(
      string GroupName,
      string TrajectoryFileName,
      double Step,
      double StartPositionX,
      double StartPositionY,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOLoadFromXYLineArc) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + Step.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultiAxisAbsolutePSOLoadFromXYLineArcWithPulses(
      string GroupName,
      string TrajectoryFileName,
      double StartPositionX,
      double StartPositionY,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultiAxisAbsolutePSOLoadFromXYLineArcWithPulses) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + StartPositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ConvertLineARCtoPTTrajectory(
      string GroupName,
      string TrajectoryFileName,
      double Velocity,
      double Acceleration,
      double DeltaT,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ConvertLineARCtoPTTrajectory) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DeltaT.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZSplineVerification(
      string GroupName,
      string TrajectoryFileName,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZSplineVerification) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZSplineVerificationResultGet(
      string PositionerName,
      out string FileName,
      out double MinimumPosition,
      out double MaximumPosition,
      out double MaximumVelocity,
      out double MaximumAcceleration,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      MinimumPosition = double.MinValue;
      MaximumPosition = double.MinValue;
      MaximumVelocity = double.MinValue;
      MaximumAcceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZSplineVerificationResultGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumPosition = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumPosition = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumAcceleration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZSplineExecution(
      string GroupName,
      string TrajectoryFileName,
      double Velocity,
      double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZSplineExecution) + "(" + (GroupName.Trim() + "," + TrajectoryFileName.Trim() + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZSplineParametersGet(
      string GroupName,
      out string FileName,
      out double Velocity,
      out double Acceleration,
      out int CurrentElementNumber,
      out string errstring)
    {
      errstring = string.Empty;
      FileName = string.Empty;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      CurrentElementNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZSplineParametersGet) + "(" + (GroupName.Trim() + ",char*,double*,double*,int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                FileName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Velocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Acceleration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                int result4;
                if (int.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  CurrentElementNumber = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZSplinePulseOutputSet(
      string GroupName,
      double StartLength,
      double EndLength,
      double PathLengthInterval,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZSplinePulseOutputSet) + "(" + (GroupName.Trim() + "," + StartLength.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + EndLength.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PathLengthInterval.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZSplinePulseOutputGet(
      string GroupName,
      out double StartLength,
      out double EndLength,
      out double PathLengthInterval,
      out string errstring)
    {
      errstring = string.Empty;
      StartLength = double.MinValue;
      EndLength = double.MinValue;
      PathLengthInterval = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZSplinePulseOutputGet) + "(" + (GroupName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  StartLength = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  EndLength = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PathLengthInterval = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisSlaveModeEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisSlaveModeEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisSlaveModeDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisSlaveModeDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisSlaveParametersSet(
      string GroupName,
      string PositionerName,
      double Ratio,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisSlaveParametersSet) + "(" + (GroupName.Trim() + "," + PositionerName.Trim() + "," + Ratio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisSlaveParametersGet(
      string GroupName,
      out string PositionerName,
      out double Ratio,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerName = string.Empty;
      Ratio = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisSlaveParametersGet) + "(" + (GroupName.Trim() + ",char*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                PositionerName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Ratio = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SpindleSlaveModeEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SpindleSlaveModeEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SpindleSlaveModeDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SpindleSlaveModeDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SpindleSlaveParametersSet(
      string GroupName,
      string PositionerName,
      double Ratio,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SpindleSlaveParametersSet) + "(" + (GroupName.Trim() + "," + PositionerName.Trim() + "," + Ratio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SpindleSlaveParametersGet(
      string GroupName,
      out string PositionerName,
      out double Ratio,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerName = string.Empty;
      Ratio = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SpindleSlaveParametersGet) + "(" + (GroupName.Trim() + ",char*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                PositionerName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Ratio = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupSpinParametersSet(
      string GroupName,
      double Velocity,
      double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupSpinParametersSet) + "(" + (GroupName.Trim() + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupSpinParametersGet(
      string GroupName,
      out double Velocity,
      out double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupSpinParametersGet) + "(" + (GroupName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Velocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  Acceleration = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupSpinCurrentGet(
      string GroupName,
      out double Velocity,
      out double Acceleration,
      out string errstring)
    {
      errstring = string.Empty;
      Velocity = double.MinValue;
      Acceleration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupSpinCurrentGet) + "(" + (GroupName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Velocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  Acceleration = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupSpinModeStop(string GroupName, double Acceleration, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupSpinModeStop) + "(" + (GroupName.Trim() + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesDisableShutter(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesDisableShutter) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesScanPositions(
      string GroupName,
      double XStartOpeningPosition,
      double XStartOpeningVelocity,
      double XEndOpeningPosition,
      double XEndOpeningVelocity,
      double XStartClosingPosition,
      double XStartClosingVelocity,
      double XEndClosingPosition,
      double XEndClosingVelocity,
      double BeamOpeningPercentage,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesScanPositions) + "(" + (GroupName.Trim() + "," + XStartOpeningPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XStartOpeningVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XEndOpeningPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XEndOpeningVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XStartClosingPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XStartClosingVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XEndClosingPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + XEndClosingVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + BeamOpeningPercentage.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesGetShutterPositions(
      string GroupName,
      out double BeamBlockedMin,
      out double BeamBlockedMax,
      out double ShutterPosition2,
      out double ShutterPosition3,
      out double ShutterPosition4,
      out double ShutterPosition5,
      out string errstring)
    {
      errstring = string.Empty;
      BeamBlockedMin = double.MinValue;
      BeamBlockedMax = double.MinValue;
      ShutterPosition2 = double.MinValue;
      ShutterPosition3 = double.MinValue;
      ShutterPosition4 = double.MinValue;
      ShutterPosition5 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesGetShutterPositions) + "(" + (GroupName.Trim() + ",double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  BeamBlockedMin = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  BeamBlockedMax = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ShutterPosition2 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  ShutterPosition3 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  ShutterPosition4 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  ShutterPosition5 = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesSetShutterPositions(
      string GroupName,
      double BeamBlockedMin,
      double BeamBlockedMax,
      double ShutterPosition2,
      double ShutterPosition3,
      double ShutterPosition4,
      double ShutterPosition5,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesSetShutterPositions) + "(" + (GroupName.Trim() + "," + BeamBlockedMin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + BeamBlockedMax.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ShutterPosition2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ShutterPosition3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ShutterPosition4.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + ShutterPosition5.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MultipleAxesTraceNextScan(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MultipleAxesTraceNextScan) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYClampDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYClampDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYClampEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYClampEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardAccDisable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardAccDisable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardAccEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardAccEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardAccGet(
      string PositionerName,
      out string OutputName1,
      out double Scale1,
      out string OutputName2,
      out double Scale2,
      out string errstring)
    {
      errstring = string.Empty;
      OutputName1 = string.Empty;
      Scale1 = double.MinValue;
      OutputName2 = string.Empty;
      Scale2 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardAccGet) + "(" + (PositionerName.Trim() + ",char*,double*,char*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                OutputName1 = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Scale1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                OutputName2 = strArray[3].Trim();
                double result3;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  Scale2 = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardAccSet(
      string PositionerName,
      string OutputName1,
      double Scale1,
      string OutputName2,
      double Scale2,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardAccSet) + "(" + (PositionerName.Trim() + "," + OutputName1.Trim() + "," + Scale1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + OutputName2.Trim() + "," + Scale2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardAccStatusGet(
      string PositionerName,
      out string Status,
      out string errstring)
    {
      errstring = string.Empty;
      Status = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardAccStatusGet) + "(" + (PositionerName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Status = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardPositionDisable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardPositionDisable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardPositionEnable(string PositionerName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardPositionEnable) + "(" + PositionerName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardPositionGet(
      string PositionerName,
      out string OutputName,
      out double Scale,
      out double Offset,
      out string errstring)
    {
      errstring = string.Empty;
      OutputName = string.Empty;
      Scale = double.MinValue;
      Offset = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardPositionGet) + "(" + (PositionerName.Trim() + ",char*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                OutputName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Scale = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  Offset = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardPositionSet(
      string PositionerName,
      string OutputName,
      double Scale,
      double Offset,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardPositionSet) + "(" + (PositionerName.Trim() + "," + OutputName.Trim() + "," + Scale.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Offset.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerFeedforwardPositionStatusGet(
      string PositionerName,
      out string Status,
      out string errstring)
    {
      errstring = string.Empty;
      Status = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerFeedforwardPositionStatusGet) + "(" + (PositionerName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Status = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupBrakeSet(string GroupName, int Command, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupBrakeSet) + "(" + (GroupName.Trim() + "," + Command.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupBrakeStateGet(string GroupName, out int CommandState, out string errstring)
    {
      errstring = string.Empty;
      CommandState = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupBrakeStateGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  CommandState = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYCrossTalkCompensationMotorDecouplingSet(
      string GroupName,
      int Mode,
      double YToX1FFAccRatio,
      double YToX2FFAccRatio,
      double X1ToYFFAccRatio,
      double X2ToYFFAccRatio,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYCrossTalkCompensationMotorDecouplingSet) + "(" + (GroupName.Trim() + "," + Mode.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + YToX1FFAccRatio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + YToX2FFAccRatio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + X1ToYFFAccRatio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + X2ToYFFAccRatio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYCrossTalkCompensationMotorDecouplingGet(
      string GroupName,
      out int Mode,
      out double YToX1FFAccRatio,
      out double YToX2FFAccRatio,
      out double X1ToYFFAccRatio,
      out double X2ToYFFAccRatio,
      out string errstring)
    {
      errstring = string.Empty;
      Mode = int.MinValue;
      YToX1FFAccRatio = double.MinValue;
      YToX2FFAccRatio = double.MinValue;
      X1ToYFFAccRatio = double.MinValue;
      X2ToYFFAccRatio = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYCrossTalkCompensationMotorDecouplingGet) + "(" + (GroupName.Trim() + ",int*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 6)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Mode = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  YToX1FFAccRatio = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  YToX2FFAccRatio = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  X1ToYFFAccRatio = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                {
                  X2ToYFFAccRatio = result6;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYGroupPositionPCORawEncoderGet(
      string GroupName,
      double PositionX,
      double PositionY,
      out double PCORawPositionX,
      out double PCORawPositionY,
      out string errstring)
    {
      errstring = string.Empty;
      PCORawPositionX = double.MinValue;
      PCORawPositionY = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYGroupPositionPCORawEncoderGet) + "(" + (GroupName.Trim() + "," + PositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PCORawPositionX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  PCORawPositionY = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYGroupPositionCorrectedProfilerGet(
      string GroupName,
      double PositionX,
      double PositionY,
      out double CorrectedProfilerPositionX,
      out double CorrectedProfilerPositionY,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectedProfilerPositionX = double.MinValue;
      CorrectedProfilerPositionY = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYGroupPositionCorrectedProfilerGet) + "(" + (GroupName.Trim() + "," + PositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CorrectedProfilerPositionX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  CorrectedProfilerPositionY = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYDualCorrectorMappingGet(
      string PositionerName,
      int LineNumber,
      out double[] Value,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Value = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        Value[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = PositionerName.Trim() + "," + LineNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (XYDualCorrectorMappingGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    Value[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYDualCorrectorMappingSet(
      string PositionerName,
      int LineNumber,
      double[] Value,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = PositionerName.Trim() + "," + LineNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (XYDualCorrectorMappingSet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = Value[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYGantryDestressingMappingGet(
      string PositionerName,
      int LineNumber,
      out double[] Value,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Value = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        Value[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = PositionerName.Trim() + "," + LineNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (XYGantryDestressingMappingGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    Value[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYGantryDestressingMappingSet(
      string PositionerName,
      int LineNumber,
      double[] Value,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = PositionerName.Trim() + "," + LineNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str2 = nameof (XYGantryDestressingMappingSet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = Value[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str3 = response.Trim();
            int result = 0;
            string[] strArray = str3.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str3;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYMappingGet(
      string PositionerName,
      int MappingNumber,
      int LineNumber,
      out double[] Value,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      Value = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        Value[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = nameof (XYMappingGet);
      string str2 = PositionerName.Trim() + "," + MappingNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + LineNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str3 = str1 + "(" + str2;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str4 = "double*";
        str3 = index != 0 || !string.IsNullOrEmpty(str2) ? str3 + "," + str4 : str3 + str4;
      }
      string command = str3 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    Value[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYMappingSet(
      string PositionerName,
      int MappingNumber,
      int LineNumber,
      double[] Value,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = nameof (XYMappingSet);
      string str2 = PositionerName.Trim() + "," + MappingNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + LineNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture);
      string str3 = str1 + "(" + str2;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str4 = Value[index].ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture);
        str3 = index != 0 || !string.IsNullOrEmpty(str2) ? str3 + "," + str4 : str3 + str4;
      }
      string command = str3 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str4 = response.Trim();
            int result = 0;
            string[] strArray = str4.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str4;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanNextGet(
      string GroupName,
      out double MinStartVelocity,
      out double MaxStartVelocity,
      out double StartCheckingTime,
      out double MinPositionForLaserEnable,
      out double MaxPositionForLaserEnable,
      out double MinPositionForNotchStart,
      out double MaxPositionForNotchEnd,
      out string errstring)
    {
      errstring = string.Empty;
      MinStartVelocity = double.MinValue;
      MaxStartVelocity = double.MinValue;
      StartCheckingTime = double.MinValue;
      MinPositionForLaserEnable = double.MinValue;
      MaxPositionForLaserEnable = double.MinValue;
      MinPositionForNotchStart = double.MinValue;
      MaxPositionForNotchEnd = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanNextGet) + "(" + (GroupName.Trim() + ",double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 8)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinStartVelocity = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaxStartVelocity = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  StartCheckingTime = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  MinPositionForLaserEnable = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  MaxPositionForLaserEnable = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  MinPositionForNotchStart = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                {
                  MaxPositionForNotchEnd = result8;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanNextSet(
      string GroupName,
      double MinStartVelocity,
      double MaxStartVelocity,
      double StartCheckingTime,
      double MinPositionForLaserEnable,
      double MaxPositionForLaserEnable,
      double MinPositionForNotchStart,
      double MaxPositionForNotchEnd,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanNextSet) + "(" + (GroupName.Trim() + "," + MinStartVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxStartVelocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartCheckingTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MinPositionForLaserEnable.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxPositionForLaserEnable.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MinPositionForNotchStart.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxPositionForNotchEnd.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanMoveAbsolute(
      string GroupName,
      double TargetPositionX,
      double TargetPositionY,
      double StartPosition,
      out int ScanErrorCode,
      out double MinimumRecordedVelocity,
      out double MaximumRecordedVelocity,
      out double AverageScanVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      ScanErrorCode = int.MinValue;
      MinimumRecordedVelocity = double.MinValue;
      MaximumRecordedVelocity = double.MinValue;
      AverageScanVelocity = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanMoveAbsolute) + "(" + (GroupName.Trim() + "," + TargetPositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + TargetPositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartPosition.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ScanErrorCode = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MinimumRecordedVelocity = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumRecordedVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  AverageScanVelocity = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanMoveRelative(
      string GroupName,
      double TargetDisplacementX,
      double TargetDisplacementY,
      double StartDisplacement,
      out int ScanErrorCode,
      out double MinimumRecordedVelocity,
      out double MaximumRecordedVelocity,
      out double AverageScanVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      ScanErrorCode = int.MinValue;
      MinimumRecordedVelocity = double.MinValue;
      MaximumRecordedVelocity = double.MinValue;
      AverageScanVelocity = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanMoveRelative) + "(" + (GroupName.Trim() + "," + TargetDisplacementX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + TargetDisplacementY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + StartDisplacement.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ScanErrorCode = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MinimumRecordedVelocity = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumRecordedVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  AverageScanVelocity = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanExecutePVT(
      string GroupName,
      string FileName,
      int ExecutionNumber,
      out int ScanErrorCode,
      out double MinimumRecordedVelocity,
      out double MaximumRecordedVelocity,
      out double AverageScanVelocity,
      out string errstring)
    {
      errstring = string.Empty;
      ScanErrorCode = int.MinValue;
      MinimumRecordedVelocity = double.MinValue;
      MaximumRecordedVelocity = double.MinValue;
      AverageScanVelocity = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanExecutePVT) + "(" + (GroupName.Trim() + "," + FileName.Trim() + "," + ExecutionNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",int*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ScanErrorCode = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MinimumRecordedVelocity = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MaximumRecordedVelocity = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  AverageScanVelocity = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanShutterDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanShutterDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYScanShutterEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYScanShutterEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYShutterInterlockMonitoringDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYShutterInterlockMonitoringDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYShutterInterlockMonitoringEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYShutterInterlockMonitoringEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYShutterInterlockParametersGet(
      string GroupName,
      out double IRefX,
      out double IRefY,
      out double l1,
      out double l2,
      out double l3,
      out double l4,
      out double r1,
      out double r2,
      out double r3,
      out double r4,
      out double L1,
      out double L2,
      out double L3,
      out double L4,
      out double R1,
      out double R2,
      out double R3,
      out double R4,
      out double WMP,
      out double WMVMin,
      out double WMVInit,
      out double SMP,
      out double SMVMin,
      out double SMVInit,
      out double OMP,
      out double OMVMin,
      out double OMVInit,
      out double mL1,
      out double mL2,
      out double mR,
      out string errstring)
    {
      errstring = string.Empty;
      IRefX = double.MinValue;
      IRefY = double.MinValue;
      l1 = double.MinValue;
      l2 = double.MinValue;
      l3 = double.MinValue;
      l4 = double.MinValue;
      r1 = double.MinValue;
      r2 = double.MinValue;
      r3 = double.MinValue;
      r4 = double.MinValue;
      L1 = double.MinValue;
      L2 = double.MinValue;
      L3 = double.MinValue;
      L4 = double.MinValue;
      R1 = double.MinValue;
      R2 = double.MinValue;
      R3 = double.MinValue;
      R4 = double.MinValue;
      WMP = double.MinValue;
      WMVMin = double.MinValue;
      WMVInit = double.MinValue;
      SMP = double.MinValue;
      SMVMin = double.MinValue;
      SMVInit = double.MinValue;
      OMP = double.MinValue;
      OMVMin = double.MinValue;
      OMVInit = double.MinValue;
      mL1 = double.MinValue;
      mL2 = double.MinValue;
      mR = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYShutterInterlockParametersGet) + "(" + (GroupName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 31)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  IRefX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  IRefY = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  l1 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  l2 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  l3 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  l4 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  r1 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  r2 = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                  r3 = result10;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                double result11;
                if (double.TryParse(strArray[10].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result11))
                  r4 = result11;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[10].Trim() + " converstion to double type";
                double result12;
                if (double.TryParse(strArray[11].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result12))
                  L1 = result12;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[11].Trim() + " converstion to double type";
                double result13;
                if (double.TryParse(strArray[12].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result13))
                  L2 = result13;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[12].Trim() + " converstion to double type";
                double result14;
                if (double.TryParse(strArray[13].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result14))
                  L3 = result14;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[13].Trim() + " converstion to double type";
                double result15;
                if (double.TryParse(strArray[14].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result15))
                  L4 = result15;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[14].Trim() + " converstion to double type";
                double result16;
                if (double.TryParse(strArray[15].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result16))
                  R1 = result16;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[15].Trim() + " converstion to double type";
                double result17;
                if (double.TryParse(strArray[16].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result17))
                  R2 = result17;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[16].Trim() + " converstion to double type";
                double result18;
                if (double.TryParse(strArray[17].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result18))
                  R3 = result18;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[17].Trim() + " converstion to double type";
                double result19;
                if (double.TryParse(strArray[18].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result19))
                  R4 = result19;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[18].Trim() + " converstion to double type";
                double result20;
                if (double.TryParse(strArray[19].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result20))
                  WMP = result20;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[19].Trim() + " converstion to double type";
                double result21;
                if (double.TryParse(strArray[20].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result21))
                  WMVMin = result21;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[20].Trim() + " converstion to double type";
                double result22;
                if (double.TryParse(strArray[21].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result22))
                  WMVInit = result22;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[21].Trim() + " converstion to double type";
                double result23;
                if (double.TryParse(strArray[22].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result23))
                  SMP = result23;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[22].Trim() + " converstion to double type";
                double result24;
                if (double.TryParse(strArray[23].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result24))
                  SMVMin = result24;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[23].Trim() + " converstion to double type";
                double result25;
                if (double.TryParse(strArray[24].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result25))
                  SMVInit = result25;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[24].Trim() + " converstion to double type";
                double result26;
                if (double.TryParse(strArray[25].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result26))
                  OMP = result26;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[25].Trim() + " converstion to double type";
                double result27;
                if (double.TryParse(strArray[26].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result27))
                  OMVMin = result27;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[26].Trim() + " converstion to double type";
                double result28;
                if (double.TryParse(strArray[27].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result28))
                  OMVInit = result28;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[27].Trim() + " converstion to double type";
                double result29;
                if (double.TryParse(strArray[28].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result29))
                  mL1 = result29;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[28].Trim() + " converstion to double type";
                double result30;
                if (double.TryParse(strArray[29].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result30))
                  mL2 = result30;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[29].Trim() + " converstion to double type";
                double result31;
                if (double.TryParse(strArray[30].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result31))
                {
                  mR = result31;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[30].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYShutterInterlockParametersSet(
      string GroupName,
      double IRefX,
      double IRefY,
      double l1,
      double l2,
      double l3,
      double l4,
      double r1,
      double r2,
      double r3,
      double r4,
      double L1,
      double L2,
      double L3,
      double L4,
      double R1,
      double R2,
      double R3,
      double R4,
      double WMP,
      double WMVMin,
      double WMVInit,
      double SMP,
      double SMVMin,
      double SMVInit,
      double OMP,
      double OMVMin,
      double OMVInit,
      double mL1,
      double mL2,
      double mR,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYShutterInterlockParametersSet) + "(" + (GroupName.Trim() + "," + IRefX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + IRefY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + l1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + l2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + l3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + l4.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + r1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + r2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + r3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + r4.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + L1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + L2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + L3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + L4.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + R1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + R2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + R3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + R4.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + WMP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + WMVMin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + WMVInit.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SMP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SMVMin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SMVInit.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + OMP.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + OMVMin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + OMVInit.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + mL1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + mL2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + mR.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZGroupPositionCorrectedProfilerGet(
      string GroupName,
      double PositionX,
      double PositionY,
      double PositionZ,
      out double CorrectedProfilerPositionX,
      out double CorrectedProfilerPositionY,
      out double CorrectedProfilerPositionZ,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectedProfilerPositionX = double.MinValue;
      CorrectedProfilerPositionY = double.MinValue;
      CorrectedProfilerPositionZ = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZGroupPositionCorrectedProfilerGet) + "(" + (GroupName.Trim() + "," + PositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionZ.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CorrectedProfilerPositionX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  CorrectedProfilerPositionY = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  CorrectedProfilerPositionZ = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int XYZGroupPositionPCORawEncoderGet(
      string GroupName,
      double PositionX,
      double PositionY,
      double PositionZ,
      out double PCORawPositionX,
      out double PCORawPositionY,
      out double PCORawPositionZ,
      out string errstring)
    {
      errstring = string.Empty;
      PCORawPositionX = double.MinValue;
      PCORawPositionY = double.MinValue;
      PCORawPositionZ = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (XYZGroupPositionPCORawEncoderGet) + "(" + (GroupName.Trim() + "," + PositionX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PositionZ.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PCORawPositionX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PCORawPositionY = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  PCORawPositionZ = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodPositionCurrentGet(
      string GroupName,
      out double[] CurrentPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        CurrentPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (HexapodPositionCurrentGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    CurrentPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodPositionSetpointGet(
      string GroupName,
      out double[] SetPointPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      SetPointPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        SetPointPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (HexapodPositionSetpointGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    SetPointPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodPositionTargetGet(
      string GroupName,
      out double[] TargetPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      TargetPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        TargetPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (HexapodPositionTargetGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    TargetPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodMoveAbsolute(
      string GroupName,
      string CoordinateSystem,
      double X,
      double Y,
      double Z,
      double U,
      double V,
      double W,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodMoveAbsolute) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + "," + X.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Y.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Z.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + U.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + V.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + W.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodMoveIncremental(
      string GroupName,
      string CoordinateSystem,
      double dX,
      double dY,
      double dZ,
      double dU,
      double dV,
      double dW,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodMoveIncremental) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + "," + dX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dZ.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dU.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dV.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dW.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodCoordinatesGet(
      string GroupName,
      string CoordinateSystemIn,
      string CoordinateSystemOut,
      double Xin,
      double Yin,
      double Zin,
      double Uin,
      double Vin,
      double Win,
      out double Xout,
      out double Yout,
      out double Zout,
      out double Uout,
      out double Vout,
      out double Wout,
      out string errstring)
    {
      errstring = string.Empty;
      Xout = double.MinValue;
      Yout = double.MinValue;
      Zout = double.MinValue;
      Uout = double.MinValue;
      Vout = double.MinValue;
      Wout = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodCoordinatesGet) + "(" + (GroupName.Trim() + "," + CoordinateSystemIn.Trim() + "," + CoordinateSystemOut.Trim() + "," + Xin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Yin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Zin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Uin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Vin.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Win.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Xout = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Yout = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Zout = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  Uout = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  Vout = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  Wout = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodCoordinateSystemSet(
      string GroupName,
      string CoordinateSystem,
      double X,
      double Y,
      double Z,
      double U,
      double V,
      double W,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodCoordinateSystemSet) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + "," + X.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Y.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Z.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + U.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + V.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + W.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodCoordinateSystemGet(
      string GroupName,
      string CoordinateSystem,
      out double X,
      out double Y,
      out double Z,
      out double U,
      out double V,
      out double W,
      out string errstring)
    {
      errstring = string.Empty;
      X = double.MinValue;
      Y = double.MinValue;
      Z = double.MinValue;
      U = double.MinValue;
      V = double.MinValue;
      W = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodCoordinateSystemGet) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + ",double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  X = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Y = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Z = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  U = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  V = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  W = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodMoveIncrementalControl(
      string GroupName,
      string CoordinateSystem,
      string HexapodTrajectoryType,
      double dX,
      double dY,
      double dZ,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodMoveIncrementalControl) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + "," + HexapodTrajectoryType.Trim() + "," + dX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dZ.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodMoveIncrementalControlWithTargetVelocity(
      string GroupName,
      string CoordinateSystem,
      string HexapodTrajectoryType,
      double dX,
      double dY,
      double dZ,
      double Velocity,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodMoveIncrementalControlWithTargetVelocity) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + "," + HexapodTrajectoryType.Trim() + "," + dX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dZ.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodMoveIncrementalControlPulseAndGatheringSet(
      string GroupName,
      int Divisor,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodMoveIncrementalControlPulseAndGatheringSet) + "(" + (GroupName.Trim() + "," + Divisor.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodMoveIncrementalControlLimitGet(
      string GroupName,
      string CoordinateSystem,
      string HexapodTrajectoryType,
      double dX,
      double dY,
      double dZ,
      out double MaximumVelocityCarriage,
      out double TrajectoryPercent,
      out string errstring)
    {
      errstring = string.Empty;
      MaximumVelocityCarriage = double.MinValue;
      TrajectoryPercent = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodMoveIncrementalControlLimitGet) + "(" + (GroupName.Trim() + "," + CoordinateSystem.Trim() + "," + HexapodTrajectoryType.Trim() + "," + dX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + dZ.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MaximumVelocityCarriage = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  TrajectoryPercent = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HexapodSGammaParametersDistanceGet(
      string PositionerName,
      double Displacement,
      double Velocity,
      double Acceleration,
      double MinJerkTime,
      double MaxJerkTime,
      out double DisplacementDuringAcc,
      out double DisplacementDuringVel,
      out string errstring)
    {
      errstring = string.Empty;
      DisplacementDuringAcc = double.MinValue;
      DisplacementDuringVel = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HexapodSGammaParametersDistanceGet) + "(" + (PositionerName.Trim() + "," + Displacement.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Velocity.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Acceleration.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MinJerkTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + MaxJerkTime.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  DisplacementDuringAcc = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  DisplacementDuringVel = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MaskClampDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MaskClampDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MaskClampEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MaskClampEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int MaskClampStateGet(string GroupName, out bool Status, out string errstring)
    {
      errstring = string.Empty;
      Status = false;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (MaskClampStateGet) + "(" + (GroupName.Trim() + ",bool*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), out result2))
                {
                  Status = Convert.ToBoolean(result2);
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to bool type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaClampDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaClampDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaClampEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaClampEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaFeedforwardParametersGet(
      string GroupName,
      out double KFeedforwardX,
      out double KFeedforwardY,
      out string errstring)
    {
      errstring = string.Empty;
      KFeedforwardX = double.MinValue;
      KFeedforwardY = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaFeedforwardParametersGet) + "(" + (GroupName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  KFeedforwardX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  KFeedforwardY = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaFeedforwardParametersSet(
      string GroupName,
      double KFeedforwardX,
      double KFeedforwardY,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaFeedforwardParametersSet) + "(" + (GroupName.Trim() + "," + KFeedforwardX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedforwardY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaFeedforwardJerkParametersGet(
      string GroupName,
      out double KFeedforwardJerkX,
      out double KFeedforwardJerkY,
      out string errstring)
    {
      errstring = string.Empty;
      KFeedforwardJerkX = double.MinValue;
      KFeedforwardJerkY = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaFeedforwardJerkParametersGet) + "(" + (GroupName.Trim() + ",double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  KFeedforwardJerkX = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  KFeedforwardJerkY = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaFeedforwardJerkParametersSet(
      string GroupName,
      double KFeedforwardJerkX,
      double KFeedforwardJerkY,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaFeedforwardJerkParametersSet) + "(" + (GroupName.Trim() + "," + KFeedforwardJerkX.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + KFeedforwardJerkY.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaSlaveModeEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaSlaveModeEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaSlaveModeDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaSlaveModeDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaSlaveParametersGet(
      string GroupName,
      out string PositionerName,
      out double Ratio,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerName = string.Empty;
      Ratio = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaSlaveParametersGet) + "(" + (GroupName.Trim() + ",char*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                PositionerName = strArray[1].Trim();
                double result2;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Ratio = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaSlaveParametersSet(
      string GroupName,
      string PositionerName,
      double Ratio,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaSlaveParametersSet) + "(" + (GroupName.Trim() + "," + PositionerName.Trim() + "," + Ratio.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZMotorDecouplingMatrixGet(
      string GroupName,
      out double Value11,
      out double Value12,
      out double Value13,
      out double Value21,
      out double Value22,
      out double Value23,
      out double Value31,
      out double Value32,
      out double Value33,
      out string errstring)
    {
      errstring = string.Empty;
      Value11 = double.MinValue;
      Value12 = double.MinValue;
      Value13 = double.MinValue;
      Value21 = double.MinValue;
      Value22 = double.MinValue;
      Value23 = double.MinValue;
      Value31 = double.MinValue;
      Value32 = double.MinValue;
      Value33 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZMotorDecouplingMatrixGet) + "(" + (GroupName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 10)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Value11 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Value12 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Value13 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  Value21 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  Value22 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  Value23 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  Value31 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  Value32 = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                {
                  Value33 = result10;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZMotorDecouplingMatrixSet(
      string GroupName,
      double Value11,
      double Value12,
      double Value13,
      double Value21,
      double Value22,
      double Value23,
      double Value31,
      double Value32,
      double Value33,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZMotorDecouplingMatrixSet) + "(" + (GroupName.Trim() + "," + Value11.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value12.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value13.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value21.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value22.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value23.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value31.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value32.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value33.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZMotorDecouplingModeGet(string GroupName, out int Mode, out string errstring)
    {
      errstring = string.Empty;
      Mode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZMotorDecouplingModeGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Mode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZMotorDecouplingModeSet(string GroupName, int Mode, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZMotorDecouplingModeSet) + "(" + (GroupName.Trim() + "," + Mode.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZEncoderCouplingMatrixGet(
      string GroupName,
      out double Value11,
      out double Value12,
      out double Value13,
      out double Value21,
      out double Value22,
      out double Value23,
      out double Value31,
      out double Value32,
      out double Value33,
      out string errstring)
    {
      errstring = string.Empty;
      Value11 = double.MinValue;
      Value12 = double.MinValue;
      Value13 = double.MinValue;
      Value21 = double.MinValue;
      Value22 = double.MinValue;
      Value23 = double.MinValue;
      Value31 = double.MinValue;
      Value32 = double.MinValue;
      Value33 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZEncoderCouplingMatrixGet) + "(" + (GroupName.Trim() + ",double*,double*,double*,double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 10)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  Value11 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  Value12 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  Value13 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  Value21 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  Value22 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  Value23 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  Value31 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  Value32 = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                {
                  Value33 = result10;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZEncoderCouplingMatrixSet(
      string GroupName,
      double Value11,
      double Value12,
      double Value13,
      double Value21,
      double Value22,
      double Value23,
      double Value31,
      double Value32,
      double Value33,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZEncoderCouplingMatrixSet) + "(" + (GroupName.Trim() + "," + Value11.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value12.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value13.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value21.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value22.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value23.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value31.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value32.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + Value33.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZEncoderCouplingModeGet(string GroupName, out int Mode, out string errstring)
    {
      errstring = string.Empty;
      Mode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZEncoderCouplingModeGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Mode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZEncoderCouplingModeSet(string GroupName, int Mode, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZEncoderCouplingModeSet) + "(" + (GroupName.Trim() + "," + Mode.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZMappingModeGet(string GroupName, out int Mode, out string errstring)
    {
      errstring = string.Empty;
      Mode = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZMappingModeGet) + "(" + (GroupName.Trim() + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Mode = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZMappingModeSet(string GroupName, int Mode, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZMappingModeSet) + "(" + (GroupName.Trim() + "," + Mode.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZTrackingCutOffFrequencyGet(
      string GroupName,
      out double CutOffFrequencyZ1,
      out double CutOffFrequencyZ2,
      out double CutOffFrequencyZ3,
      out string errstring)
    {
      errstring = string.Empty;
      CutOffFrequencyZ1 = double.MinValue;
      CutOffFrequencyZ2 = double.MinValue;
      CutOffFrequencyZ3 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZTrackingCutOffFrequencyGet) + "(" + (GroupName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CutOffFrequencyZ1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  CutOffFrequencyZ2 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  CutOffFrequencyZ3 = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZTrackingCutOffFrequencySet(
      string GroupName,
      double CutOffFrequencyZ1,
      double CutOffFrequencyZ2,
      double CutOffFrequencyZ3,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZTrackingCutOffFrequencySet) + "(" + (GroupName.Trim() + "," + CutOffFrequencyZ1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + CutOffFrequencyZ2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + CutOffFrequencyZ3.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZFocusModeEnable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZFocusModeEnable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZFocusModeDisable(string GroupName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZFocusModeDisable) + "(" + GroupName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZTrackingUserMaximumZZZTargetDifferenceGet(
      string GroupName,
      out double UserMaximumZZZTargetDifference,
      out string errstring)
    {
      errstring = string.Empty;
      UserMaximumZZZTargetDifference = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZTrackingUserMaximumZZZTargetDifferenceGet) + "(" + (GroupName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  UserMaximumZZZTargetDifference = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TZTrackingUserMaximumZZZTargetDifferenceSet(
      string GroupName,
      double UserMaximumZZZTargetDifference,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TZTrackingUserMaximumZZZTargetDifferenceSet) + "(" + (GroupName.Trim() + "," + UserMaximumZZZTargetDifference.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalModuleSocketReserve(int ModuleNumber, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalModuleSocketReserve) + "(" + ModuleNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalModuleSocketFree(int ModuleNumber, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalModuleSocketFree) + "(" + ModuleNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalModuleFirmwareVersionGet(
      int ModuleNumber,
      out string Version,
      out string errstring)
    {
      errstring = string.Empty;
      Version = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalModuleFirmwareVersionGet) + "(" + (ModuleNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                Version = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalModuleErrorStringGet(
      int ModuleNumber,
      int Error,
      out string ErrorDescription,
      out string errstring)
    {
      errstring = string.Empty;
      ErrorDescription = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalModuleErrorStringGet) + "(" + (ModuleNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + Error.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ErrorDescription = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ExternalModuleISRTimeDurationsGet(
      int ModuleNumber,
      out double CurrentCorrectorISRDuration,
      out double MaximumCorrectorISRDuration,
      out double CurrentProfilerISRDuration,
      out double MaximumProfilerISRDuration,
      out string errstring)
    {
      errstring = string.Empty;
      CurrentCorrectorISRDuration = double.MinValue;
      MaximumCorrectorISRDuration = double.MinValue;
      CurrentProfilerISRDuration = double.MinValue;
      MaximumProfilerISRDuration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ExternalModuleISRTimeDurationsGet) + "(" + (ModuleNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CurrentCorrectorISRDuration = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumCorrectorISRDuration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  CurrentProfilerISRDuration = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  MaximumProfilerISRDuration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int LoginCheck(string Name, string Password, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (LoginCheck) + "(" + (Name.Trim() + "," + Password.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int LoginSCheck(string Name, string CryptedPassword, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (LoginSCheck) + "(" + (Name.Trim() + "," + CryptedPassword.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupAllPositionTrace(string GroupName, string TitleTrace, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupAllPositionTrace) + "(" + (GroupName.Trim() + "," + TitleTrace.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMotorMatrixTrace(string GroupName, string TitleTrace, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMotorMatrixTrace) + "(" + (GroupName.Trim() + "," + TitleTrace.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupMotorMatrixInverseTrace(
      string GroupName,
      string TitleTrace,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupMotorMatrixInverseTrace) + "(" + (GroupName.Trim() + "," + TitleTrace.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupPositionCurrentRawGet(
      string GroupName,
      out double[] RawCurrentEncoderPosition,
      int nbItems,
      out string errstring)
    {
      errstring = string.Empty;
      RawCurrentEncoderPosition = new double[nbItems];
      for (int index = 0; index < nbItems; ++index)
        RawCurrentEncoderPosition[index] = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string str1 = GroupName.Trim();
      string str2 = nameof (GroupPositionCurrentRawGet) + "(" + str1;
      string empty = string.Empty;
      for (int index = 0; index < nbItems; ++index)
      {
        string str3 = "double*";
        str2 = index != 0 || !string.IsNullOrEmpty(str1) ? str2 + "," + str3 : str2 + str3;
      }
      string command = str2 + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= nbItems + 1)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                double[] numArray = new double[nbItems];
                for (int index = 0; index < nbItems; ++index)
                {
                  if (double.TryParse(strArray[index + 1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out numArray[index]))
                    RawCurrentEncoderPosition[index] = numArray[index];
                  else
                    errstring = command + "() has failed: An Error has occurred during " + strArray[index + 1].Trim() + " converstion to double type";
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotorOutputOffsetGet(
      string PositionerName,
      out double PrimaryDAC1,
      out double PrimaryDAC2,
      out double PrimaryDACDifferentialGain,
      out double SecondaryDAC1,
      out double SecondaryDAC2,
      out double SecondaryDACDifferentialGain,
      out string errstring)
    {
      errstring = string.Empty;
      PrimaryDAC1 = double.MinValue;
      PrimaryDAC2 = double.MinValue;
      PrimaryDACDifferentialGain = double.MinValue;
      SecondaryDAC1 = double.MinValue;
      SecondaryDAC2 = double.MinValue;
      SecondaryDACDifferentialGain = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotorOutputOffsetGet) + "(" + (PositionerName.Trim() + ",double*,double*,double*,double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  PrimaryDAC1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PrimaryDAC2 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  PrimaryDACDifferentialGain = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  SecondaryDAC1 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  SecondaryDAC2 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  SecondaryDACDifferentialGain = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotorOutputOffsetSet(
      string PositionerName,
      double PrimaryDAC1,
      double PrimaryDAC2,
      double PrimaryDACDifferentialGain,
      double SecondaryDAC1,
      double SecondaryDAC2,
      double SecondaryDACDifferentialGain,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotorOutputOffsetSet) + "(" + (PositionerName.Trim() + "," + PrimaryDAC1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PrimaryDAC2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + PrimaryDACDifferentialGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SecondaryDAC1.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SecondaryDAC2.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + SecondaryDACDifferentialGain.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerMotorReferencePositionGet(
      string PositionerName,
      out double ReferencePosition,
      out string errstring)
    {
      errstring = string.Empty;
      ReferencePosition = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerMotorReferencePositionGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  ReferencePosition = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerEncoderAbsoluteHardConfigurationGet(
      string PositionerName,
      out double Configuration,
      out string errstring)
    {
      errstring = string.Empty;
      Configuration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerEncoderAbsoluteHardConfigurationGet) + "(" + (PositionerName.Trim() + ",double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  Configuration = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaPositionRawGet(
      string GroupName,
      out double RawEncoderPosition1,
      out double RawEncoderPosition2,
      out double RawEncoderPosition3,
      out string errstring)
    {
      errstring = string.Empty;
      RawEncoderPosition1 = double.MinValue;
      RawEncoderPosition2 = double.MinValue;
      RawEncoderPosition3 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaPositionRawGet) + "(" + (GroupName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  RawEncoderPosition1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  RawEncoderPosition2 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  RawEncoderPosition3 = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SingleAxisThetaPositionRawCorrectedGet(
      string GroupName,
      out double RawCorrectedEncoderPosition1,
      out double RawCorrectedEncoderPosition2,
      out double RawCorrectedEncoderPosition3,
      out string errstring)
    {
      errstring = string.Empty;
      RawCorrectedEncoderPosition1 = double.MinValue;
      RawCorrectedEncoderPosition2 = double.MinValue;
      RawCorrectedEncoderPosition3 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SingleAxisThetaPositionRawCorrectedGet) + "(" + (GroupName.Trim() + ",double*,double*,double*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  RawCorrectedEncoderPosition1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  RawCorrectedEncoderPosition2 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  RawCorrectedEncoderPosition3 = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EEPROMCIESet(int CardNumber, string ReferenceString, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EEPROMCIESet) + "(" + (CardNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ReferenceString.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EEPROMDACOffsetCIESet(
      int PlugNumber,
      double DAC1Offset,
      double DAC2Offset,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EEPROMDACOffsetCIESet) + "(" + (PlugNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + DAC1Offset.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture) + "," + DAC2Offset.ToString(this.m_strPrecision, (IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EEPROMDriverSet(int PlugNumber, string ReferenceString, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EEPROMDriverSet) + "(" + (PlugNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ReferenceString.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EEPROMINTSet(int CardNumber, string ReferenceString, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EEPROMINTSet) + "(" + (CardNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + ReferenceString.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CPUCoreAndBoardSupplyVoltagesGet(
      out double VoltageCPUCore,
      out double SupplyVoltage1P5V,
      out double SupplyVoltage3P3V,
      out double SupplyVoltage5V,
      out double SupplyVoltage12V,
      out double SupplyVoltageM12V,
      out double SupplyVoltageM5V,
      out double SupplyVoltage5VSB,
      out string errstring)
    {
      errstring = string.Empty;
      VoltageCPUCore = double.MinValue;
      SupplyVoltage1P5V = double.MinValue;
      SupplyVoltage3P3V = double.MinValue;
      SupplyVoltage5V = double.MinValue;
      SupplyVoltage12V = double.MinValue;
      SupplyVoltageM12V = double.MinValue;
      SupplyVoltageM5V = double.MinValue;
      SupplyVoltage5VSB = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CPUCoreAndBoardSupplyVoltagesGet) + "(" + "double*,double*,double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 9)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  VoltageCPUCore = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  SupplyVoltage1P5V = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  SupplyVoltage3P3V = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  SupplyVoltage5V = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  SupplyVoltage12V = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  SupplyVoltageM12V = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  SupplyVoltageM5V = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                {
                  SupplyVoltage5VSB = result9;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CPUTemperatureAndFanSpeedGet(
      out double CPUTemperature,
      out double CPUFanSpeed,
      out string errstring)
    {
      errstring = string.Empty;
      CPUTemperature = double.MinValue;
      CPUFanSpeed = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CPUTemperatureAndFanSpeedGet) + "(" + "double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CPUTemperature = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  CPUFanSpeed = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CIEHeaderGet(int CIEBoardIndex, out string HeaderString, out string errstring)
    {
      errstring = string.Empty;
      HeaderString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CIEHeaderGet) + "(" + (CIEBoardIndex.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                HeaderString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CIEReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CIEReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ActionListGet(out string ActionList, out string errstring)
    {
      errstring = string.Empty;
      ActionList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ActionListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  ActionList = !string.IsNullOrEmpty(ActionList) ? ActionList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ActionExtendedListGet(out string ActionList, out string errstring)
    {
      errstring = string.Empty;
      ActionList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ActionExtendedListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  ActionList = !string.IsNullOrEmpty(ActionList) ? ActionList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int APIExtendedListGet(out string Method, out string errstring)
    {
      errstring = string.Empty;
      Method = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (APIExtendedListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Method = !string.IsNullOrEmpty(Method) ? Method + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int APIListGet(out string Method, out string errstring)
    {
      errstring = string.Empty;
      Method = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (APIListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Method = !string.IsNullOrEmpty(Method) ? Method + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int APIListStandardGet(out string Method, out string errstring)
    {
      errstring = string.Empty;
      Method = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (APIListStandardGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Method = !string.IsNullOrEmpty(Method) ? Method + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int APIListAMATGet(out string Method, out string errstring)
    {
      errstring = string.Empty;
      Method = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (APIListAMATGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Method = !string.IsNullOrEmpty(Method) ? Method + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TCLScriptsListGet(out string Method, out string errstring)
    {
      errstring = string.Empty;
      Method = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TCLScriptsListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Method = !string.IsNullOrEmpty(Method) ? Method + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TrajectoryFilesListGet(out string Method, out string errstring)
    {
      errstring = string.Empty;
      Method = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TrajectoryFilesListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  Method = !string.IsNullOrEmpty(Method) ? Method + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerStatusListGet(out string ControllerStatusList, out string errstring)
    {
      errstring = string.Empty;
      ControllerStatusList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerStatusListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  ControllerStatusList = !string.IsNullOrEmpty(ControllerStatusList) ? ControllerStatusList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ErrorListGet(out string ErrorsList, out string errstring)
    {
      errstring = string.Empty;
      ErrorsList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ErrorListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  ErrorsList = !string.IsNullOrEmpty(ErrorsList) ? ErrorsList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventListGet(out string EventList, out string errstring)
    {
      errstring = string.Empty;
      EventList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  EventList = !string.IsNullOrEmpty(EventList) ? EventList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringListGet(out string list, out string errstring)
    {
      errstring = string.Empty;
      list = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  list = !string.IsNullOrEmpty(list) ? list + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExtendedListGet(out string list, out string errstring)
    {
      errstring = string.Empty;
      list = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringExtendedListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  list = !string.IsNullOrEmpty(list) ? list + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringExternalListGet(out string list, out string errstring)
    {
      errstring = string.Empty;
      list = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringExternalListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  list = !string.IsNullOrEmpty(list) ? list + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GroupStatusListGet(out string GroupStatusList, out string errstring)
    {
      errstring = string.Empty;
      GroupStatusList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GroupStatusListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  GroupStatusList = !string.IsNullOrEmpty(GroupStatusList) ? GroupStatusList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int HardwareInternalListGet(out string InternalHardwareList, out string errstring)
    {
      errstring = string.Empty;
      InternalHardwareList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (HardwareInternalListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  InternalHardwareList = !string.IsNullOrEmpty(InternalHardwareList) ? InternalHardwareList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ObjectsListGet(out string ObjectsList, out string errstring)
    {
      errstring = string.Empty;
      ObjectsList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ObjectsListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  ObjectsList = !string.IsNullOrEmpty(ObjectsList) ? ObjectsList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerErrorListGet(out string PositionerErrorList, out string errstring)
    {
      errstring = string.Empty;
      PositionerErrorList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerErrorListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  PositionerErrorList = !string.IsNullOrEmpty(PositionerErrorList) ? PositionerErrorList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerHardwareStatusListGet(
      out string PositionerHardwareStatusList,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerHardwareStatusList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerHardwareStatusListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  PositionerHardwareStatusList = !string.IsNullOrEmpty(PositionerHardwareStatusList) ? PositionerHardwareStatusList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int PositionerDriverStatusListGet(
      out string PositionerDriverStatusList,
      out string errstring)
    {
      errstring = string.Empty;
      PositionerDriverStatusList = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (PositionerDriverStatusListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  PositionerDriverStatusList = !string.IsNullOrEmpty(PositionerDriverStatusList) ? PositionerDriverStatusList + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ReferencingActionListGet(out string list, out string errstring)
    {
      errstring = string.Empty;
      list = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ReferencingActionListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  list = !string.IsNullOrEmpty(list) ? list + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ReferencingSensorListGet(out string list, out string errstring)
    {
      errstring = string.Empty;
      list = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ReferencingSensorListGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  list = !string.IsNullOrEmpty(list) ? list + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SystemIniParameterGet(
      string SectionName,
      string ParameterName,
      out string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      ParameterValue = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SystemIniParameterGet) + "(" + (SectionName.Trim() + "," + ParameterName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ParameterValue = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SystemIniParameterSet(
      string SectionName,
      string ParameterName,
      string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SystemIniParameterSet) + "(" + (SectionName.Trim() + "," + ParameterName.Trim() + "," + ParameterValue.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SystemRefParameterGet(
      string SectionName,
      string ParameterName,
      out string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      ParameterValue = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SystemRefParameterGet) + "(" + (SectionName.Trim() + "," + ParameterName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ParameterValue = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SystemRefParameterSet(
      string SectionName,
      string ParameterName,
      string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SystemRefParameterSet) + "(" + (SectionName.Trim() + "," + ParameterName.Trim() + "," + ParameterValue.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int FirmwareRefParameterGet(
      string SectionName,
      string ParameterName,
      out string ParameterValue,
      out string errstring)
    {
      errstring = string.Empty;
      ParameterValue = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (FirmwareRefParameterGet) + "(" + (SectionName.Trim() + "," + ParameterName.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ParameterValue = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringUserDatasGet(
      out double UserData1,
      out double UserData2,
      out double UserData3,
      out double UserData4,
      out double UserData5,
      out double UserData6,
      out double UserData7,
      out double UserData8,
      out double UserData9,
      out double UserData10,
      out double UserData11,
      out double UserData12,
      out double UserData13,
      out double UserData14,
      out double UserData15,
      out double UserData16,
      out string errstring)
    {
      errstring = string.Empty;
      UserData1 = double.MinValue;
      UserData2 = double.MinValue;
      UserData3 = double.MinValue;
      UserData4 = double.MinValue;
      UserData5 = double.MinValue;
      UserData6 = double.MinValue;
      UserData7 = double.MinValue;
      UserData8 = double.MinValue;
      UserData9 = double.MinValue;
      UserData10 = double.MinValue;
      UserData11 = double.MinValue;
      UserData12 = double.MinValue;
      UserData13 = double.MinValue;
      UserData14 = double.MinValue;
      UserData15 = double.MinValue;
      UserData16 = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringUserDatasGet) + "(" + "double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 17)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  UserData1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  UserData2 = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  UserData3 = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  UserData4 = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  UserData5 = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  UserData6 = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  UserData7 = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  UserData8 = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                  UserData9 = result10;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                double result11;
                if (double.TryParse(strArray[10].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result11))
                  UserData10 = result11;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[10].Trim() + " converstion to double type";
                double result12;
                if (double.TryParse(strArray[11].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result12))
                  UserData11 = result12;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[11].Trim() + " converstion to double type";
                double result13;
                if (double.TryParse(strArray[12].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result13))
                  UserData12 = result13;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[12].Trim() + " converstion to double type";
                double result14;
                if (double.TryParse(strArray[13].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result14))
                  UserData13 = result14;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[13].Trim() + " converstion to double type";
                double result15;
                if (double.TryParse(strArray[14].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result15))
                  UserData14 = result15;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[14].Trim() + " converstion to double type";
                double result16;
                if (double.TryParse(strArray[15].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result16))
                  UserData15 = result16;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[15].Trim() + " converstion to double type";
                double result17;
                if (double.TryParse(strArray[16].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result17))
                {
                  UserData16 = result17;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[16].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int GatheringUserDatasReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (GatheringUserDatasReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int SocketsStatusGet(out string SocketsStatus, out string errstring)
    {
      errstring = string.Empty;
      SocketsStatus = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (SocketsStatusGet) + "(" + "char*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result = 0;
            string[] strArray = response.Split(',');
            int length = strArray.Length;
            if (length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                for (int index = 1; index < length - 1; ++index)
                  SocketsStatus = !string.IsNullOrEmpty(SocketsStatus) ? SocketsStatus + ", " + strArray[index].Trim() : strArray[index].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int TestTCP(string InputString, out string ReturnString, out string errstring)
    {
      errstring = string.Empty;
      ReturnString = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (TestTCP) + "(" + (InputString.Trim() + ",char*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                ReturnString = strArray[1].Trim();
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int OptionalModuleExecute(string ModuleFileName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (OptionalModuleExecute) + "(" + ModuleFileName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int OptionalModuleKill(string TaskName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (OptionalModuleKill) + "(" + TaskName.Trim() + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CIERegister32ValueGet(
      string PositionerName,
      short BoardOffset,
      out int RegisterValue,
      out string errstring)
    {
      errstring = string.Empty;
      RegisterValue = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CIERegister32ValueGet) + "(" + (PositionerName.Trim() + "," + BoardOffset.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  RegisterValue = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CIERegister64ValueGet(
      string PositionerName,
      short BoardOffset,
      out int RegisterValue,
      out string errstring)
    {
      errstring = string.Empty;
      RegisterValue = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CIERegister64ValueGet) + "(" + (PositionerName.Trim() + "," + BoardOffset.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ",int*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                {
                  RegisterValue = result2;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CIERegisterValueSet(
      string PositionerName,
      short BoardOffset,
      int RegisterValue,
      out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CIERegisterValueSet) + "(" + (PositionerName.Trim() + "," + BoardOffset.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + RegisterValue.ToString((IFormatProvider) CultureInfo.InvariantCulture)) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DRV11StatusGet(
      string PositionerName,
      out ushort DriverStatusByte1,
      out ushort DriverStatusByte2,
      out string errstring)
    {
      errstring = string.Empty;
      DriverStatusByte1 = (ushort) 0;
      DriverStatusByte2 = (ushort) 0;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DRV11StatusGet) + "(" + (PositionerName.Trim() + ",unsigned short*,unsigned short*") + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            response = response.Trim();
            int result1 = 0;
            string[] strArray = response.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                ushort result2;
                if (ushort.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  DriverStatusByte1 = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to UInt16 type";
                ushort result3;
                if (ushort.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  DriverStatusByte2 = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to UInt16 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = response;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugTraceCommunicationReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugTraceCommunicationReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugTraceCommunicationSave(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugTraceCommunicationSave) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int RunTraceloggerProcessWithTimeSetting(int TraceloggerTime, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (RunTraceloggerProcessWithTimeSetting) + "(" + TraceloggerTime.ToString((IFormatProvider) CultureInfo.InvariantCulture) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int RunTraceloggerProcessWithRollingBuffer(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (RunTraceloggerProcessWithRollingBuffer) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int CreateQNXEvent(int EventNumber, string EventName, out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (CreateQNXEvent) + "(" + (EventNumber.ToString((IFormatProvider) CultureInfo.InvariantCulture) + "," + EventName.Trim()) + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int StartEventsAcqusition(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (StartEventsAcqusition) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int StopEventsAcqusition(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (StopEventsAcqusition) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int EventTriggerSet(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (EventTriggerSet) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRCorrectorLoadRatioGet(
      out double ISRCorrectorLoadRatio,
      out double ISRCorrectorLoadRatioMin,
      out double ISRCorrectorLoadRatioMax,
      out string errstring)
    {
      errstring = string.Empty;
      ISRCorrectorLoadRatio = double.MinValue;
      ISRCorrectorLoadRatioMin = double.MinValue;
      ISRCorrectorLoadRatioMax = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRCorrectorLoadRatioGet) + "(" + "double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRCorrectorLoadRatio = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRCorrectorLoadRatioMin = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  ISRCorrectorLoadRatioMax = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRProfilerLoadRatioGet(
      out double ISRProfilerLoadRatio,
      out double ISRProfilerLoadRatioMin,
      out double ISRProfilerLoadRatioMax,
      out string errstring)
    {
      errstring = string.Empty;
      ISRProfilerLoadRatio = double.MinValue;
      ISRProfilerLoadRatioMin = double.MinValue;
      ISRProfilerLoadRatioMax = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRProfilerLoadRatioGet) + "(" + "double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRProfilerLoadRatio = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRProfilerLoadRatioMin = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  ISRProfilerLoadRatioMax = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRServitudesLoadRatioGet(
      out double ISRServitudesLoadRatio,
      out double ISRServitudesLoadRatioMin,
      out double ISRServitudesLoadRatioMax,
      out string errstring)
    {
      errstring = string.Empty;
      ISRServitudesLoadRatio = double.MinValue;
      ISRServitudesLoadRatioMin = double.MinValue;
      ISRServitudesLoadRatioMax = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRServitudesLoadRatioGet) + "(" + "double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRServitudesLoadRatio = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRServitudesLoadRatioMin = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  ISRServitudesLoadRatioMax = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRCorrectorUsageGet(
      out double ISRCorrectorUsageCurrent,
      out double ISRCorrectorPeriodUsageCurrent,
      out double ISRCorrectorUsageMin,
      out double ISRCorrectorPeriodUsageMin,
      out double ISRCorrectorUsageMax,
      out double ISRCorrectorPeriodUsageMax,
      out string errstring)
    {
      errstring = string.Empty;
      ISRCorrectorUsageCurrent = double.MinValue;
      ISRCorrectorPeriodUsageCurrent = double.MinValue;
      ISRCorrectorUsageMin = double.MinValue;
      ISRCorrectorPeriodUsageMin = double.MinValue;
      ISRCorrectorUsageMax = double.MinValue;
      ISRCorrectorPeriodUsageMax = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRCorrectorUsageGet) + "(" + "double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRCorrectorUsageCurrent = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRCorrectorPeriodUsageCurrent = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ISRCorrectorUsageMin = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  ISRCorrectorPeriodUsageMin = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  ISRCorrectorUsageMax = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  ISRCorrectorPeriodUsageMax = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRProfilerUsageGet(
      out double ISRProfilerUsageCurrent,
      out double ISRProfilerPeriodUsageCurrent,
      out double ISRProfilerUsageMin,
      out double ISRProfilerPeriodUsageMin,
      out double ISRProfilerUsageMax,
      out double ISRProfilerPeriodUsageMax,
      out long ISRProfilerLostCounter,
      out string errstring)
    {
      errstring = string.Empty;
      ISRProfilerUsageCurrent = double.MinValue;
      ISRProfilerPeriodUsageCurrent = double.MinValue;
      ISRProfilerUsageMin = double.MinValue;
      ISRProfilerPeriodUsageMin = double.MinValue;
      ISRProfilerUsageMax = double.MinValue;
      ISRProfilerPeriodUsageMax = double.MinValue;
      ISRProfilerLostCounter = long.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRProfilerUsageGet) + "(" + "double*,double*,double*,double*,double*,double*,long long int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 8)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRProfilerUsageCurrent = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRProfilerPeriodUsageCurrent = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ISRProfilerUsageMin = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  ISRProfilerPeriodUsageMin = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  ISRProfilerUsageMax = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  ISRProfilerPeriodUsageMax = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                long result8;
                if (long.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                {
                  ISRProfilerLostCounter = result8;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to Int64 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugISRServitudesUsageGet(
      out double ISRServitudesUsageCurrent,
      out double ISRServitudesPeriodUsageCurrent,
      out double ISRServitudesUsageMin,
      out double ISRServitudesPeriodUsageMin,
      out double ISRServitudesUsageMax,
      out double ISRServitudesPeriodUsageMax,
      out string errstring)
    {
      errstring = string.Empty;
      ISRServitudesUsageCurrent = double.MinValue;
      ISRServitudesPeriodUsageCurrent = double.MinValue;
      ISRServitudesUsageMin = double.MinValue;
      ISRServitudesPeriodUsageMin = double.MinValue;
      ISRServitudesUsageMax = double.MinValue;
      ISRServitudesPeriodUsageMax = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugISRServitudesUsageGet) + "(" + "double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRServitudesUsageCurrent = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRServitudesPeriodUsageCurrent = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ISRServitudesUsageMin = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  ISRServitudesPeriodUsageMin = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  ISRServitudesUsageMax = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  ISRServitudesPeriodUsageMax = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugCorrectorTimeUsageGet(
      out double ISRCorrectorStartTime,
      out double PreviousISRCorrectorPeriod,
      out double ISRInitParam0Duration,
      out double ISRInitParam1Duration,
      out double ISRTimerDuration,
      out double ISRGPIODuration,
      out double ISRGroupsDuration,
      out double ISREventDuration,
      out double ISRGeneralInhibDuration,
      out double ISRGatheringDuration,
      out double ISRInitParam2Duration,
      out string errstring)
    {
      errstring = string.Empty;
      ISRCorrectorStartTime = double.MinValue;
      PreviousISRCorrectorPeriod = double.MinValue;
      ISRInitParam0Duration = double.MinValue;
      ISRInitParam1Duration = double.MinValue;
      ISRTimerDuration = double.MinValue;
      ISRGPIODuration = double.MinValue;
      ISRGroupsDuration = double.MinValue;
      ISREventDuration = double.MinValue;
      ISRGeneralInhibDuration = double.MinValue;
      ISRGatheringDuration = double.MinValue;
      ISRInitParam2Duration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugCorrectorTimeUsageGet) + "(" + "double*,double*,double*,double*,double*,double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 12)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRCorrectorStartTime = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  PreviousISRCorrectorPeriod = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ISRInitParam0Duration = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  ISRInitParam1Duration = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  ISRTimerDuration = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  ISRGPIODuration = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  ISRGroupsDuration = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                  ISREventDuration = result9;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                double result10;
                if (double.TryParse(strArray[9].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result10))
                  ISRGeneralInhibDuration = result10;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[9].Trim() + " converstion to double type";
                double result11;
                if (double.TryParse(strArray[10].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result11))
                  ISRGatheringDuration = result11;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[10].Trim() + " converstion to double type";
                double result12;
                if (double.TryParse(strArray[11].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result12))
                {
                  ISRInitParam2Duration = result12;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[11].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugProfilerTimeUsageGet(
      out double ISRCorrectProfilDelta,
      out double ISRGroupsDuration,
      out double ISRInitParamDuration,
      out string errstring)
    {
      errstring = string.Empty;
      ISRCorrectProfilDelta = double.MinValue;
      ISRGroupsDuration = double.MinValue;
      ISRInitParamDuration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugProfilerTimeUsageGet) + "(" + "double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 4)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRCorrectProfilDelta = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRGroupsDuration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                {
                  ISRInitParamDuration = result4;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int DebugServitudesTimeUsageGet(
      out double ISRProfilServDelta,
      out double ISRErrorCheckDuration,
      out double ISRGroupsDuration,
      out double ISRInitParamDuration,
      out string errstring)
    {
      errstring = string.Empty;
      ISRProfilServDelta = double.MinValue;
      ISRErrorCheckDuration = double.MinValue;
      ISRGroupsDuration = double.MinValue;
      ISRInitParamDuration = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (DebugServitudesTimeUsageGet) + "(" + "double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 5)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  ISRProfilServDelta = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  ISRErrorCheckDuration = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  ISRGroupsDuration = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                {
                  ISRInitParamDuration = result5;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerMotionKernelMinMaxTimeLoadGet(
      out double MinimumCPUTotalLoadRatio,
      out double MaximumCPUTotalLoadRatio,
      out double MinimumCPUCorrectorLoadRatio,
      out double MaximumCPUCorrectorLoadRatio,
      out double MinimumCPUProfilerLoadRatio,
      out double MaximumCPUProfilerLoadRatio,
      out double MinimumCPUServitudesLoadRatio,
      out double MaximumCPUServitudesLoadRatio,
      out string errstring)
    {
      errstring = string.Empty;
      MinimumCPUTotalLoadRatio = double.MinValue;
      MaximumCPUTotalLoadRatio = double.MinValue;
      MinimumCPUCorrectorLoadRatio = double.MinValue;
      MaximumCPUCorrectorLoadRatio = double.MinValue;
      MinimumCPUProfilerLoadRatio = double.MinValue;
      MaximumCPUProfilerLoadRatio = double.MinValue;
      MinimumCPUServitudesLoadRatio = double.MinValue;
      MaximumCPUServitudesLoadRatio = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerMotionKernelMinMaxTimeLoadGet) + "(" + "double*,double*,double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 9)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumCPUTotalLoadRatio = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumCPUTotalLoadRatio = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MinimumCPUCorrectorLoadRatio = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  MaximumCPUCorrectorLoadRatio = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  MinimumCPUProfilerLoadRatio = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                  MaximumCPUProfilerLoadRatio = result7;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                double result8;
                if (double.TryParse(strArray[7].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result8))
                  MinimumCPUServitudesLoadRatio = result8;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[7].Trim() + " converstion to double type";
                double result9;
                if (double.TryParse(strArray[8].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result9))
                {
                  MaximumCPUServitudesLoadRatio = result9;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[8].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerMotionKernelMinMaxTimeLoadReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerMotionKernelMinMaxTimeLoadReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerMotionKernelPeriodMinMaxGet(
      out double MinimumCorrectorPeriod,
      out double MaximumCorrectorPeriod,
      out double MinimumProfilerPeriod,
      out double MaximumProfilerPeriod,
      out double MinimumServitudesPeriod,
      out double MaximumServitudesPeriod,
      out string errstring)
    {
      errstring = string.Empty;
      MinimumCorrectorPeriod = double.MinValue;
      MaximumCorrectorPeriod = double.MinValue;
      MinimumProfilerPeriod = double.MinValue;
      MaximumProfilerPeriod = double.MinValue;
      MinimumServitudesPeriod = double.MinValue;
      MaximumServitudesPeriod = double.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerMotionKernelPeriodMinMaxGet) + "(" + "double*,double*,double*,double*,double*,double*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 7)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                double result2;
                if (double.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  MinimumCorrectorPeriod = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to double type";
                double result3;
                if (double.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                  MaximumCorrectorPeriod = result3;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to double type";
                double result4;
                if (double.TryParse(strArray[3].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result4))
                  MinimumProfilerPeriod = result4;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[3].Trim() + " converstion to double type";
                double result5;
                if (double.TryParse(strArray[4].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result5))
                  MaximumProfilerPeriod = result5;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[4].Trim() + " converstion to double type";
                double result6;
                if (double.TryParse(strArray[5].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result6))
                  MinimumServitudesPeriod = result6;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[5].Trim() + " converstion to double type";
                double result7;
                if (double.TryParse(strArray[6].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result7))
                {
                  MaximumServitudesPeriod = result7;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[6].Trim() + " converstion to double type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ControllerMotionKernelPeriodMinMaxReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ControllerMotionKernelPeriodMinMaxReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ISRCorrectorCompensateOverrunNumberGet(
      out int CorrectorOverrunCompensationNumber,
      out int CorrectorOverrunCompensationMissNumber,
      out string errstring)
    {
      errstring = string.Empty;
      CorrectorOverrunCompensationNumber = int.MinValue;
      CorrectorOverrunCompensationMissNumber = int.MinValue;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ISRCorrectorCompensateOverrunNumberGet) + "(" + "int*,int*" + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result1 = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 3)
            {
              if (int.TryParse(strArray[0], out result1))
              {
                if (result1 != 0)
                {
                  errstring = result1.ToString();
                  break;
                }
                int result2;
                if (int.TryParse(strArray[1].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result2))
                  CorrectorOverrunCompensationNumber = result2;
                else
                  errstring = command + "() has failed: An Error has occurred during " + strArray[1].Trim() + " converstion to Int32 type";
                int result3;
                if (int.TryParse(strArray[2].Trim(), NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, out result3))
                {
                  CorrectorOverrunCompensationMissNumber = result3;
                  break;
                }
                errstring = command + "() has failed: An Error has occurred during " + strArray[2].Trim() + " converstion to Int32 type";
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int ISRCorrectorCompensateOverrunNumberReset(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (ISRCorrectorCompensateOverrunNumberReset) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int RunQconn(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (RunQconn) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int RelockFiles(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (RelockFiles) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int UnlockFiles(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (UnlockFiles) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int Crash(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (Crash) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    public int RunPidin(out string errstring)
    {
      errstring = string.Empty;
      if (this.m_socket == null)
      {
        errstring = this.m_resManager.GetString("Error_001");
        return -1;
      }
      string command = nameof (RunPidin) + "(" + string.Empty + ")";
      string response = string.Empty;
      switch (this.m_socket.DeviceQuery(command, out response))
      {
        case -2:
          errstring = this.m_resManager.GetString("Error_001");
          break;
        case -1:
          string lastError = this.m_socket.GetLastError();
          errstring = this.m_resManager.GetString("Error_007");
          if (lastError.Length > 0)
          {
            errstring += lastError;
            break;
          }
          break;
        case 0:
          if (response.Length > 0)
          {
            string str = response.Trim();
            int result = 0;
            string[] strArray = str.Split(',');
            if (strArray.Length >= 2)
            {
              if (int.TryParse(strArray[0], out result))
              {
                if (result != 0)
                {
                  errstring = result.ToString();
                  break;
                }
                break;
              }
              errstring = command + "() has failed: An Error has occurred during " + strArray[0] + " converstion to int type";
              break;
            }
            errstring = str;
            break;
          }
          this.LogResponseError("Error_005", out errstring, command, response);
          break;
      }
      return !string.IsNullOrEmpty(errstring) ? -1 : 0;
    }

    private void LogResponseError(
      string resourceErrorString,
      out string errorDesc,
      string command,
      string response)
    {
      errorDesc = this.m_resManager.GetString(resourceErrorString);
    }

    private int[,] ConvertStringToBitArray(string s)
    {
      int[,] numArray = new int[s.Length, 8];
      for (int index1 = 0; index1 < s.Length; ++index1)
      {
        int num = (int) s[index1];
        for (int index2 = 0; index2 < 8; ++index2)
        {
          numArray[index1, index2] = num % 2;
          num /= 2;
        }
      }
      return numArray;
    }
  }
}
